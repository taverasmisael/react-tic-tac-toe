{"version":3,"sources":["install-sw.js","functionality/helpers.js","functionality/local-storage.js","functionality/history-entry.js","functionality/history.js","functionality/tictactoe.js","components/Game/GameBoard.js","components/ui/GameStadistics.js","components/Game/Game.js","components/functional/ColorPicker.js","components/Game/GameConfigBar.js","components/Game/GameModeSelect.js","components/ui/FxPlayer.js","components/ui/AboutTable.js","components/functional/AboutModal.js","components/ui/FAB.js","App.js","index.js"],"names":["navigator","serviceWorker","register","scope","then","registration","console","log","ready","eq","obj1","obj2","dynamicClass","base","extra","predicate","concat","Array","isArray","join","extend","_len","arguments","length","options","_key","Object","assign","apply","LocalStorage","prefix","undefined","classCallCheck","this","secretprefix","key","value","item","GenerateKey","localStorage","setItem","Stringify","get","includes","Parse","getItem","removeItem","JSON","parse","exception","toString","stringify","HistoryEntry","winner","time","score","GameHistory","Store","SCORES","MaxRegistries","token","board","multipler","Math","round","RateBoard","updateHistory","storageHistory","getTopScores","clear","newEntry","currentHistory","getHistory","mergedHistory","toConsumableArray","topHistory","set","history","sortHistory","slice","sort","a","b","PLAYER_TWO_SYMBOL","Board","MakeMove","index","player","map","square","idx","SwitchPlayers","CheckForWinner","find","combo","LegalMoves","reduce","prev","curr","i","RemainingMoves","availableMoves","GameOver","MinScenario","depth","bestScenario","Number","NEGATIVE_INFINITY","nextPlayer","NextScenario","MaxScenario","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","move","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","GameState","extras","_times","PLAYER_ONE_SYMBOL","currentTurn","vsComputer","gameStarted","times","defineProperty","positionClasses","GameBoard","_ref","onSelectSquare","BoardSquares","react_default","createElement","type","aria-label","onClick","className","findIndex","el","generateSquareClass","GameStadistics","states","onResetScores","title","state","colSpan","generateTable","defaultProps","Game","components_Game_GameBoard","components_ui_GameStadistics","ColorOptions","eventClass","ColorPicker","onChangeColor","buttonsColor","_ref2","event","id","color","split","GameConfigBar","currentPlayer","onResetGame","isVisible","onSetVolume","min","max","step","onChange","target","components_functional_ColorPicker","GameModeSelect","onModeSelect","FxPlayer","forwardRef","ref","mediaSrc","mediaType","preload","src","propTypes","PropTypes","string","isRequired","AboutTable","members","member","image","alt","name","generateMembersCells","AboutModal","_this","props","onClose","components_ui_AboutTable","_this2","document","addEventListener","keyCode","Component","FAB","text","App","possibleConstructorReturn","getPrototypeOf","call","InitialState","headerVisible","aboutVisible","BGColor","FX","currentFX","FXPlayer","createRef","FXPlayer1","FXPlayer2","toggleHeader","components_Game_GameConfigBar","Boolean","amount","InitGame","components_Game_Game","resetScores","components_ui_FAB","setState","ui_FxPlayer","components_Game_GameModeSelect","mode","AboutModal_AboutModal","anys","MakeAIMove","StopGameTimer","SetGameTimer","_this3","timer","setInterval","newTimes","clearInterval","volume","UpdateGameStatus","squareIndex","newState","isWinner","computerWon","winnerName","prompt","GenerateHistory","PlayFx","PlayPopEffect","game","nextMove","PlayFxPlayer","_this4","Player","current","PlaySound","currentTime","promise","play","_","catch","error","bind","ReactDOM","render","App_App","getElementById"],"mappings":"mqBAAI,kBAAmBA,YACrBA,UAAUC,cACPC,SAAS,sBAAuB,CAAEC,MAAO,wBACzCC,KAAK,SAASC,GACbC,QAAQC,IAAI,+BAEhBP,UAAUC,cAAcO,MAAMJ,KAAK,SAASC,GAC1CC,QAAQC,IAAI,8JCPHE,EAAK,SAACC,EAAMC,GAAP,OAAgBD,IAASC,GAW9BC,EAAe,SAACC,EAAMC,EAAOC,GAAd,OAC1BA,EAAS,GAAAC,OAAMH,EAAN,KAAAG,OAAcC,MAAMC,QAAQJ,GAASA,EAAMK,KAAK,KAAOL,GAAUD,GAiB/DO,EAAS,SAACP,GAAD,QAAAQ,EAAAC,UAAAC,OAAUC,EAAV,IAAAP,MAAAI,EAAA,EAAAA,EAAA,KAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAUD,EAAVC,EAAA,GAAAH,UAAAG,GAAA,OAAsBC,OAAOC,OAAPC,MAAAF,OAAM,CAAQ,GAAIb,GAAZG,OAAqBQ,KC5BlDK,aAGnB,SAAAA,IAA2B,IAAfC,EAAeR,UAAAC,OAAA,QAAAQ,IAAAT,UAAA,GAAAA,UAAA,GAAN,KAAMI,OAAAM,EAAA,EAAAN,CAAAO,KAAAJ,GACzBI,KAAKC,aAAeJ,kDAUlBK,EAAKC,GACP,IAAMC,EAAOJ,KAAKK,YAAYH,GAG9B,OADAI,aAAaC,QAAQH,EAAMJ,KAAKQ,UAAUL,IACnCH,KAAKS,IAAIP,+BASdA,GACF,IAAME,EAAOF,EAAIQ,SAASV,KAAKC,cAAgBC,EAAMF,KAAKK,YAAYH,GAEtE,OAAOF,KAAKW,MAAML,aAAaM,QAAQR,mCAQlCF,GACL,IAAME,EAAOJ,KAAKK,YAAYH,GAC9B,OAAOI,aAAaO,WAAWT,mCAO/B,IAAK,IAAIF,KAAOI,aACVJ,EAAIQ,SAASV,KAAKC,eAAeK,aAAaO,WAAWX,uCAWrDA,GACV,SAAAnB,OAAUiB,KAAKC,aAAf,KAAAlB,OAA+BmB,iCAG3BC,GACJ,IACE,OAAOW,KAAKC,MAAMZ,GAClB,MAAOa,GACP,MAAO,sCASDb,GACR,GAAqB,kBAAVA,GAAuC,kBAAVA,EACtC,OAAOA,EAAMc,WACR,GAAqB,kBAAVd,EAOhB,MAAO,GANP,IACE,OAAOW,KAAKI,UAAUf,GACtB,MAAOa,GACP,MAAO,aCpFMG,EAQnB,SAAAA,EAAYC,EAAQC,EAAMC,GAAQ7B,OAAAM,EAAA,EAAAN,CAAAO,KAAAmB,GAChCnB,KAAKoB,OAASA,EACdpB,KAAKqB,KAAOA,EACZrB,KAAKsB,MAAQA,GCLIC,aACnB,SAAAA,IAAe9B,OAAAM,EAAA,EAAAN,CAAAO,KAAAuB,GACbvB,KAAKwB,MAAQ,IAAI5B,EAAa,cAC9BI,KAAKyB,OAAS,CAAC,IAAK,GAAI,GAAI,GAC5BzB,KAAK0B,cAAgB,+DAUPC,EAAOC,EAAOP,GAC5B,IAAMQ,EAAYR,EAAO,GAAK,EAAIS,KAAKC,MAAMV,EAAO,GAAK,EACnDzC,EAAOoB,KAAKyB,OAAOI,GAErBP,EADeU,EAAUJ,GACJhD,EACzB,OAAOoB,KAAKiC,cAAc,IAAId,EAAaQ,EAAON,EAAMC,yCAQxD,IAAMY,EAAiBlC,KAAKwB,MAAMf,IAAI,YAAc,GACpD,OAAOT,KAAKmC,aAAaD,yCAKzBlC,KAAKwB,MAAMY,8CASCC,GACZ,IAAMC,EAAiBtC,KAAKuC,aACtBC,EAAa/C,OAAAgD,EAAA,EAAAhD,CAAO6C,GAAPvD,OAAA,CAAuBsD,IACpCK,EAAa1C,KAAKmC,aAAaK,GACrC,OAAOxC,KAAKwB,MAAMmB,IAAI,UAAWD,wCAQtBE,GACX,OAAO5C,KAAK6C,YAAYD,GAASE,MAAM,EAAG9C,KAAK0B,mDAQrCkB,GACV,OAAOA,EAAQG,KAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE1B,MAAQ2B,EAAE3B,iBCjEjC4B,EAAoB,IAE1B,SAASC,IACd,MAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAGnC,IASMC,EAAW,SAACxB,EAAOyB,EAAOC,GACrC,MAVyD,KAU3B1B,EAAMyB,GAChCzB,EAAM2B,IAAI,SAACC,EAAQC,GAAT,OAAiBjF,EAAGiF,EAAKJ,GAASC,EAASE,IACrD5B,GAQO8B,EAAgB,SAAAJ,GAC3B,OAAO9E,EAAG8E,EA5BqB,KA4BQJ,EA5BR,KAoCpBS,EAAiB,SAAA/B,GAY5B,MAXsB,CACpB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGYgC,KAAK,SAAAC,GACxB,SACErF,EAAGoD,EAAMiC,EAAM,IAAKjC,EAAMiC,EAAM,OAChCrF,EAAGoD,EAAMiC,EAAM,IAAKjC,EAAMiC,EAAM,OAEzBjC,EAAMiC,EAAM,OAWZC,EAAa,SAAAlC,GAAK,OAAIA,EAAMmC,OAAO,SAACC,EAAMC,EAAMC,GAAb,OAAoBD,EAAsBD,EAAvBvE,OAAAgD,EAAA,EAAAhD,CAAYuE,GAAZjF,OAAA,CAAkBmF,KAAW,KAOnFC,EAAiB,SAAAvC,GAAK,OAAIkC,EAAWlC,GAAOtC,QAU5C0C,EAAY,SAACJ,GACxB,IAAMR,EAASuC,EAAe/B,GACxBwC,EAAiBD,EAAevC,GAStC,OAPIR,EACO,GAAKgD,EACLA,GACC,GAAKA,EAEN,GAKPC,EAAW,SAACzC,GAAD,OAAW+B,EAAe/B,KAAWuC,EAAevC,IAErE,SAAS0C,EAAY1C,EAAO0B,EAAQiB,GAClC,GAAGF,EAASzC,KAAW2C,EACrB,OAAOvC,EAAUJ,GAEnB,IAAI4C,EAAeC,OAAOC,kBACpBN,EAAiBN,EAAWlC,GAC5B+C,EAAajB,EAAcJ,GAC3BsB,EAAeD,IAAezB,EAAoB2B,EAAcP,EAP7BQ,GAAA,EAAAC,GAAA,EAAAC,OAAAlF,EAAA,IAQzC,QAAAmF,EAAAC,EAAiBd,EAAjBe,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAiC,KAAxBS,EAAwBN,EAAA9E,MAE/BqE,EADiBI,EAAaxB,EAASxB,EAAO2D,EAAMZ,GAAaA,EAAYJ,EAAO,GAC1DC,EAAee,EAAOf,GAVT,MAAAgB,GAAAT,GAAA,EAAAC,EAAAQ,EAAA,YAAAV,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAczC,OAAOR,EAGT,SAASK,EAAYjD,EAAO0B,EAAQiB,GAClC,GAAGF,EAASzC,KAAW2C,EACrB,OAAOvC,EAAUJ,GAEnB,IAAI4C,EAAeC,OAAOC,kBACpBN,EAAiBN,EAAWlC,GAC5B+C,EAAajB,EAAcJ,GAC3BsB,EAAeD,IAAezB,EAAoB2B,EAAcP,EAP7BoB,GAAA,EAAAC,GAAA,EAAAC,OAAA9F,EAAA,IAQzC,QAAA+F,EAAAC,EAAiB1B,EAAjBe,OAAAC,cAAAM,GAAAG,EAAAC,EAAAT,QAAAC,MAAAI,GAAA,EAAiC,KAAxBH,EAAwBM,EAAA1F,MAE/BqE,EADiBI,EAAaxB,EAASxB,EAAO2D,EAAMZ,GAAaA,EAAYJ,EAAO,GAC1DC,EAAee,EAAOf,GAVT,MAAAgB,GAAAG,GAAA,EAAAC,EAAAJ,EAAA,YAAAE,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GAczC,OAAOpB,EAGF,IAYMuB,EAAY,SAACC,GAAD,IAAAC,EAAA,OAAYxG,OAAOC,OAAO,GAAI,CACrDwG,kBAhJ+B,IAiJ/BhD,oBACAiD,YAlJ+B,IAmJ/BvE,MAAO,IAAIuB,EACX/B,YAAQtB,EACR8C,QAAS,IAAIrB,EACb6E,YAAY,EACZC,aAAa,EACbC,OAAKL,EAAA,GAAAxG,OAAA8G,EAAA,EAAA9G,CAAAwG,EAxJ0B,IAyJR,GADlBxG,OAAA8G,EAAA,EAAA9G,CAAAwG,EAEF/C,EAAoB,GAFlB+C,IAIJD,IC3HGQ,SAAkB,CACtB,iDAAkD,mDAAoD,kDACtG,oDAAqD,sDAAuD,qDAC5G,oDAAqD,sDAAuD,uDAU/FC,MA3CG,SAAAC,GAAuC,IAApC9E,EAAoC8E,EAApC9E,MAAOR,EAA6BsF,EAA7BtF,OAAQuF,EAAqBD,EAArBC,eAC5BC,EAAehF,EAAM2B,IAAI,SAACC,EAAQH,GAAT,OAC7BwD,EAAA7D,EAAA8D,cAAA,UAAQC,KAAK,SACXC,aAAA,UAAAjI,OAAsBsE,EAAQ,EAA9B,aAAAtE,OAA2CyE,GAAU,WACrDtD,IAAKmD,EACL4D,QAAS,kBAAMN,EAAetD,IAC9B6D,UA8BN,SAA6B9F,EAAQiC,GACnC,OAAO1E,EAAY,qBAAAI,OACIyH,EAAgBnD,IACrC,CAAC,6BACDjC,GAAUA,EAAO+F,UAAU,SAAAC,GAAE,OAAIA,IAAO/D,KAAU,GAlCrCgE,CAAoBjG,EAAQiC,IAEvCwD,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,aACbL,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,WACbL,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,WACZ1D,QAMX,OACEqD,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,aACZN,ICrBMU,SAAiB,SAAAZ,GAAA,IAAEa,EAAFb,EAAEa,OAAQC,EAAVd,EAAUc,cAAV,OAC5BX,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,kBACbL,EAAA7D,EAAA8D,cAAA,aACAD,EAAA7D,EAAA8D,cAAA,aACED,EAAA7D,EAAA8D,cAAA,UACED,EAAA7D,EAAA8D,cAAA,qBACAD,EAAA7D,EAAA8D,cAAA,qBACAD,EAAA7D,EAAA8D,cAAA,oBAAWD,EAAA7D,EAAA8D,cAAA,wBACXD,EAAA7D,EAAA8D,cAAA,qBACAD,EAAA7D,EAAA8D,cAAA,UACED,EAAA7D,EAAA8D,cAAA,UAAQI,UAAU,4BAA4BO,MAAM,kBAAkBR,QAAS,kBAAMO,MACnFX,EAAA7D,EAAA8D,cAAA,KAAGI,UAAU,kBAAb,oBAKRL,EAAA7D,EAAA8D,cAAA,aAqBJ,SAAuBS,GACrB,OAAOA,EAAOhE,IAAI,SAACmE,EAAOrE,GAAR,OAChBwD,EAAA7D,EAAA8D,cAAA,MAAI5G,IAAKmD,EAAO6D,UAAU,mBACxBL,EAAA7D,EAAA8D,cAAA,UAAKzD,EAAQ,GACbwD,EAAA7D,EAAA8D,cAAA,UAAKY,EAAMtG,QACXyF,EAAA7D,EAAA8D,cAAA,UAAKY,EAAMrG,MACXwF,EAAA7D,EAAA8D,cAAA,MAAIa,QAAQ,KAAKD,EAAMpG,UA1BtBsG,CAAcL,QAMND,IAMfA,EAAeO,aAAe,CAC5BN,OAAQ,cCVKO,EAlBK,SAAApB,GAAA,IAAEtF,EAAFsF,EAAEtF,OAAQQ,EAAV8E,EAAU9E,MAAO+E,EAAjBD,EAAiBC,eAAgB/D,EAAjC8D,EAAiC9D,QAAS4E,EAA1Cd,EAA0Cc,cAA1C,OAClBX,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,QACbL,EAAA7D,EAAA8D,cAACiB,EAAD,CACEnG,MAAOA,EACPR,OAAQA,EACRuF,eAAgB,SAACnD,GAAD,OAAYmD,EAAenD,MAE7CqD,EAAA7D,EAAA8D,cAACkB,EAAD,CAAgBR,cAAe,kBAAMA,KAAiBD,OAAQ3E,MCT9DqF,eAAe,CACjB,CACER,MAAO,oBACPP,UAAW,CAAC,eAAgB,sBAC5BgB,WAAY,QACX,CACDT,MAAO,kBACPP,UAAW,CAAC,eAAgB,qBAC5BgB,WAAY,OACX,CACDT,MAAO,kBACPP,UAAW,CAAC,eAAgB,sBAC5BgB,WAAY,QACX,CACDT,MAAO,mBACPP,UAAW,CAAC,eAAgB,uBAC5BgB,WAAY,SACX,CACDT,MAAO,4BACPP,UAAW,CAAC,gBACZgB,WAAY,MAwBDC,EApBY,SAAAzB,GAAuB,IAApB0B,EAAoB1B,EAApB0B,cAUtBC,EAAeJ,EAAa1E,IAAI,SAAA+E,EAAiCjF,GAAjC,IAAEoE,EAAFa,EAAEb,MAAOP,EAAToB,EAASpB,UAAWgB,EAApBI,EAAoBJ,WAApB,OACpCrB,EAAA7D,EAAA8D,cAAA,UAAQ5G,IAAKmD,EAAO0D,KAAK,SAASU,MAAOA,EAAOP,UAAWA,EAAUhI,KAAK,KAAM+H,QAAS,SAACsB,GAAD,OAVpEC,EAU6FnF,EAVzFoF,EAUgGP,EATzHD,EAAeA,EAAa1E,IAAI,SAACkF,EAAOpF,GACtC,OAAGA,IAAUmF,EACJ/I,OAAOC,OAAO,GAAI+I,EAAO,CAACvB,UAAUzH,OAAAgD,EAAA,EAAAhD,CAAKgJ,EAAMvB,WAAZnI,OAAA,CAAuB,2BAE5DU,OAAOC,OAAO,GAAI+I,EAAO,CAACvB,UAAWuB,EAAMvB,UAAUhI,KAAK,KAAKwJ,MAAM,iCAE9EN,EAAcK,GAPM,IAACD,EAAIC,OAY3B,OACE5B,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,eACXmB,ICnCFM,EAAgB,SAAAjC,GAAA,IAElBJ,EAFkBI,EAElBJ,MACAsC,EAHkBlC,EAGlBkC,cACAC,EAJkBnC,EAIlBmC,YACAzH,EALkBsF,EAKlBtF,OACA0H,EANkBpC,EAMlBoC,UACAV,EAPkB1B,EAOlB0B,cACAW,EARkBrC,EAQlBqC,YARkB,OAWpBlC,EAAA7D,EAAA8D,cAAA,UACEI,UAAWvI,EACT,gBACA,CAAC,0BACDmK,IAGFjC,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,6BACbL,EAAA7D,EAAA8D,cAAA,MAAII,UAAU,wBAAd,8BACAL,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,yBACbL,EAAA7D,EAAA8D,cAAA,SACEC,KAAK,QACLiC,IAAI,IACJC,IAAI,IACJC,KAAK,MACLC,SAAU,SAAAb,GAAA,IAAGc,EAAHd,EAAGc,OAAH,OAAgBL,EAAYK,EAAOjJ,YAInD0G,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,sBACbL,EAAA7D,EAAA8D,cAAA,MAAII,UAAU,wBAAd,YAA+C0B,GAC/C/B,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,yBAAyBZ,EAAMsC,GAAiB,UAEjE/B,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,6BACbL,EAAA7D,EAAA8D,cAAA,MAAII,UAAU,wBAAd,kBACAL,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,yBACbL,EAAA7D,EAAA8D,cAACuC,EAAD,CAAajB,cAAe,SAAAK,GAAK,OAAIL,EAAcK,QAGvD5B,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,2BACbL,EAAA7D,EAAA8D,cAAA,UAAQI,UAAU,yBAAyBD,QAAS,kBAAM4B,MACvDzH,EAAS,gBAAkB,wBAepCuH,EAAcd,aAAe,CAC3BvB,MAAO,IAGMqC,QCnCAW,SA5Be,SAAA5C,GAAA,IAAG6C,EAAH7C,EAAG6C,aAAcT,EAAjBpC,EAAiBoC,UAAjB,OAC5BjC,EAAA7D,EAAA8D,cAAA,OAAKI,UAAWvI,EAAa,iBAAkB,CAAC,2BAA4BmK,IAC1EjC,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,6BACbL,EAAA7D,EAAA8D,cAAA,iCACAD,EAAA7D,EAAA8D,cAAA,QAAMI,UAAU,kBAChBL,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,4BACbL,EAAA7D,EAAA8D,cAAA,UACEI,UAAU,kDACVD,QAAS,kBAAMsC,GAAa,KAF9B,WAMA1C,EAAA7D,EAAA8D,cAAA,UACEI,UAAU,kDACVD,QAAS,kBAAMsC,GAAa,KAF9B,+BCfKC,EAAWC,qBAAW,SAAA/C,EAA0BgD,GAA1B,IAAGC,EAAHjD,EAAGiD,SAAUC,EAAblD,EAAakD,UAAb,OACjC/C,EAAA7D,EAAA8D,cAAA,SACE4C,IAAKA,EACLG,QAAQ,WACRC,IALgB,mBAKGH,EACnB5C,KAAI,SAAAhI,OAAW6K,GAAa,WAIhCJ,EAASO,UAAY,CACnBJ,SAAUK,IAAUC,OAAOC,WAC3BN,UAAWI,IAAUC,QAGRT,QCbFW,eAAa,SAAAzD,GAAA,IAAG0D,EAAH1D,EAAG0D,QAAH,OACxBvD,EAAA7D,EAAA8D,cAAA,SAAOI,UAAU,cACfL,EAAA7D,EAAA8D,cAAA,aACED,EAAA7D,EAAA8D,cAAA,UACED,EAAA7D,EAAA8D,cAAA,WACAD,EAAA7D,EAAA8D,cAAA,oBACAD,EAAA7D,EAAA8D,cAAA,4BAGJD,EAAA7D,EAAA8D,cAAA,aAgBJ,SAA8BsD,GAC5B,OAAOA,EAAQ7G,IAAI,SAAA8G,GAAM,OACvBxD,EAAA7D,EAAA8D,cAAA,MAAI5G,IAAKmK,EAAOjM,cACdyI,EAAA7D,EAAA8D,cAAA,UACED,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,4CAA4C4C,IAAKO,EAAOC,MAAOC,IAAKF,EAAOG,QAE5F3D,EAAA7D,EAAA8D,cAAA,UAAKuD,EAAOG,MACZ3D,EAAA7D,EAAA8D,cAAA,UAAKuD,EAAOjM,iBAtBXqM,CAAqBL,OAKbD,IAMfA,EAAWtC,aAAe,CACxBuC,QAAS,gBClBUM,mLACV,IAAAC,EAAA3K,KACP,OACE6G,EAAA7D,EAAA8D,cAAA,OACEI,UAAWvI,EACT,aACA,CAAC,0BACDqB,KAAK4K,MAAM9B,YAGbjC,EAAA7D,EAAA8D,cAAA,MAAII,UAAU,qBAAd,aACAL,EAAA7D,EAAA8D,cAAA,UACEI,UAAU,yDACVH,KAAK,SACLE,QAAS,kBAAM0D,EAAKC,MAAMC,YAH5B,KAOAhE,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,uBACbL,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,8BACbL,EAAA7D,EAAA8D,cAAA,MAAII,UAAU,6BAAd,sBACAL,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,4BA8BvBL,EAAA7D,EAAA8D,cAAA,6CACmCD,EAAA7D,EAAA8D,cAAA,eADnC,MACgDD,EAAA7D,EAAA8D,cAAA,eADhD,+IAG2C,IACzCD,EAAA7D,EAAA8D,cAAA,0EAAuE,IAJzE,uEA5BMD,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,8BACbL,EAAA7D,EAAA8D,cAAA,MAAII,UAAU,6BAAd,mBACAL,EAAA7D,EAAA8D,cAAA,OAAKI,UAAU,4BACbL,EAAA7D,EAAA8D,cAACgE,EAAD,CAAYV,QAASA,sDAOb,IAAAW,EAAA/K,KAClBgL,SAASC,iBAAiB,QAAS,SAAAvE,GACjB,KADkCA,EAAdwE,SACdH,EAAKH,MAAM9B,WAAWiC,EAAKH,MAAMC,mBAnCrBM,aA6CxCT,EAAW7C,aAAe,CACxBiB,WAAW,aC5CEsC,EANI,SAAA1E,GAAA,IAAEO,EAAFP,EAAEO,QAASoE,EAAX3E,EAAW2E,KAAM5D,EAAjBf,EAAiBe,MAAjB,OACjBZ,EAAA7D,EAAA8D,cAAA,UAAQW,MAAOA,EAAOP,UAAU,kCAAkCH,KAAK,SAASE,QAAS,kBAAMA,MAC5FoE,ICgBgBC,cACnB,SAAAA,EAAYV,GAAO,IAAAD,EAAA,OAAAlL,OAAAM,EAAA,EAAAN,CAAAO,KAAAsL,IACjBX,EAAAlL,OAAA8L,EAAA,EAAA9L,CAAAO,KAAAP,OAAA+L,EAAA,EAAA/L,CAAA6L,GAAAG,KAAAzL,KAAM4K,KACDc,aAAe,IAAI3F,EAAU,CAChC4F,eAAe,EACfC,cAAc,EACdC,QAAS,GACTC,GAAI,CACFC,UAAW,cAIfpB,EAAKjD,MAAQiD,EAAKe,aAClBf,EAAKqB,SAAWC,sBAChBtB,EAAKuB,UAAYD,sBACjBtB,EAAKwB,UAAYF,sBAdAtB,wEAiBV,IAAAI,EAAA/K,KACP,OACE6G,EAAA7D,EAAA8D,cAAA,OACEI,UAAWvI,EAAY,OAAAI,OACdiB,KAAK0H,MAAMmE,SAClB,CAAC,kBACD7L,KAAK0H,MAAMkE,eAGb/E,EAAA7D,EAAA8D,cAAA,UACEG,QAAS,kBAAM8D,EAAKqB,gBACpBrF,KAAK,SACLG,UAAWvI,EACT,iBACA,CAAC,wBACDqB,KAAK0H,MAAMiE,gBAGb9E,EAAA7D,EAAA8D,cAAA,QAAMI,UAAU,yBAChBL,EAAA7D,EAAA8D,cAAA,QAAMI,UAAU,yBAChBL,EAAA7D,EAAA8D,cAAA,QAAMI,UAAU,0BAElBL,EAAA7D,EAAA8D,cAACuF,EAAD,CACEvD,UAAW9I,KAAK0H,MAAMiE,cACtBrF,MAAOtG,KAAK0H,MAAMpB,MAClBlF,OAAQkL,QAAQtM,KAAK0H,MAAMtG,QAC3BwH,cAAe5I,KAAK0H,MAAMvB,YAC1B4C,YAAa,SAAAwD,GAAM,OAAIxB,EAAKhC,YAAYwD,IACxC1D,YAAa,kBAAMkC,EAAKyB,YACxBpE,cAAe,SAAAK,GAAK,OAAIsC,EAAK3C,cAAcK,MAE7C5B,EAAA7D,EAAA8D,cAAC2F,EAAD,CACErL,OAAQpB,KAAK0H,MAAMtG,OACnBQ,MAAO5B,KAAK0H,MAAM9F,MAClBgB,QAAS5C,KAAK0H,MAAM9E,QAAQL,aAC5BiF,cAAe,kBAAMuD,EAAKrD,MAAM9E,QAAQ8J,eACxC/F,eAAgB,SAAAnD,GAAM,OACpBuH,EAAK3H,SAAS2H,EAAKrD,MAAOlE,EAAQuH,EAAKrD,MAAMvB,gBAGjDU,EAAA7D,EAAA8D,cAAC6F,EAAD,CACEtB,KAAK,IACL5D,MAAM,QACNR,QAAS,kBAAM8D,EAAK6B,SAAS,CAAEhB,cAAc,OAE/C/E,EAAA7D,EAAA8D,cAAC+F,EAAD,CAAUnD,IAAK1J,KAAKgM,SAAUrC,SAAU3J,KAAK0H,MAAMoE,GAAGC,YACtDlF,EAAA7D,EAAA8D,cAAC+F,EAAD,CAAUnD,IAAK1J,KAAKkM,UAAWvC,SAAU,aACzC9C,EAAA7D,EAAA8D,cAAC+F,EAAD,CAAUnD,IAAK1J,KAAKmM,UAAWxC,SAAU,aACzC9C,EAAA7D,EAAA8D,cAACgG,EAAD,CACEhE,WAAY9I,KAAK0H,MAAMrB,YACvBkD,aAAc,SAAAwD,GAAI,OAAIhC,EAAKyB,SAASO,MAEtClG,EAAA7D,EAAA8D,cAACkG,EAAD,CACElE,UAAW9I,KAAK0H,MAAMkE,aACtBf,QAAS,kBAAME,EAAK6B,SAAS,CAAEhB,cAAc,oDAMjChB,EAAOlD,EAAOuF,GAE9BzO,EAAGkJ,EAAMvB,YAAanG,KAAK0H,MAAMxE,oBACjC1E,EAAGkJ,EAAMtB,YAAY,IAErBpG,KAAKkN,WAAWxF,kDAKlB1H,KAAKmN,iDAGEJ,GACP,IAAM1G,OAAuBvG,IAATiN,EACpB/M,KAAKmN,gBACLnN,KAAK4M,SACHzN,EAAOa,KAAK0L,aAAc,CACxBrF,cACAD,WAAY2G,EACZlB,QAAS7L,KAAK0H,MAAMmE,QACpBjJ,QAAS5C,KAAK0H,MAAM9E,WAGpByD,GAAarG,KAAKoN,sDAGT,IAAAC,EAAArN,KACbA,KAAKsN,MAAQC,YAAY,WACvB,IAAMjK,EAAS+J,EAAK3F,MAAMvB,YACpBqH,EAAWrO,EAAOkO,EAAK3F,MAAMpB,MAAZ7G,OAAA8G,EAAA,EAAA9G,CAAA,GACpB6D,EAAa+J,EAAK3F,MAAMpB,MAAMhD,GfjHT,IemHxB+J,EAAKT,SAAS,CAAEtG,MAAOkH,KACtB,6CAIHC,cAAczN,KAAKsN,2CAGTf,GACVvM,KAAKgM,SAAS0B,OAASnB,wCAGX9D,GACZzI,KAAK4M,SAAS,CACZf,QAASpD,EAAK,WAAA1J,OAAc0J,GAAU,4CAKxCzI,KAAK4M,SAAS,CACZjB,eAAgB3L,KAAK0H,MAAMiE,iDAItBjE,EAAOlE,EAAQF,GACjBoE,EAAMtG,QACTpB,KAAK4M,SAAS5M,KAAK2N,iBAAiBjG,EAAOlE,EAAQF,6CAGtCoE,EAAOkG,EAAatK,GACnC,IAAIuK,EAAW,GAIf,GAFAA,EAASjM,MAAQwB,EAASsE,EAAM9F,MAAOgM,EAAatK,GAEhD9E,EAAGqP,EAASjM,MAAO8F,EAAM9F,OAC3B,MAAO,GAEP,IAAMkM,EAAWnK,EAAekK,EAASjM,OACnCmM,EACJD,GACCpG,EAAMtB,YAAcsB,EAAMvB,cAAgBuB,EAAMxE,kBACnD,GAAI4K,EAAU,CACZD,EAASzM,OAAS0M,EAClB,IAAME,EAAaD,EACjB,aACAE,OAAO,oBAAqB,aAAe,WAC7CjO,KAAK0H,MAAM9E,QAAQsL,gBAAnB,GAAAnP,OACKiP,EADL,MAAAjP,OACoB2I,EAAMvB,YAD1B,KAEE0H,EAASjM,MACT8F,EAAMpB,MAAMoB,EAAMvB,cAElBnG,KAAKmN,gBACLnN,KAAKmO,OAAO,gBACZN,EAASxH,aAAc,OAChBlC,EAAe0J,EAASjM,QACjC5B,KAAKoO,cAAc9K,GACnBuK,EAAS1H,YAAczC,EAAcJ,KAErCtD,KAAKmN,gBACLnN,KAAKmO,OAAO,aAIhB,OAAON,qCAGEQ,GACT,IXlEmBzM,EAAc0B,EWkE3BgL,GXlEa1M,EWkEKyM,EAAKzM,MXlEI0B,EWkEM+K,EAAKlI,YXjE3CxC,EAAe/B,GAAeI,EAAUJ,GAEzB0C,EAAY1C,EAAO0B,EAAQ,IWgE3CtD,KAAKoD,SAASiL,EAAMC,EAAUD,EAAKlI,mDAGvB7C,GACRA,IAAWtD,KAAK0H,MAAMxB,mBACxBlG,KAAKuO,aAAavO,KAAKkM,WAEvB5I,IAAWtD,KAAK0H,MAAMxE,mBACrB1E,EAAGwB,KAAK0H,MAAMtB,YAAY,IAE3BpG,KAAKuO,aAAavO,KAAKmM,0CAGpBJ,GAAW,IAAAyC,EAAAxO,KACCyO,EAAWzO,KAAKgM,SAAzB0C,QAER1O,KAAK4M,SAAS,CAAEd,GAAI,CAAEC,cAAe,WACnCyC,EAAKG,UAAUF,0CAINjF,GAAU,IACJiF,EAAWjF,EAApBkF,QACR1O,KAAK2O,UAAUF,qCAOPA,GACRA,EAAOG,YAAc,EACrBH,EAAOf,OAAS,GAChB,IAAMmB,EAAUJ,EAAOK,YACPhP,IAAZ+O,GACFA,EAAQ1Q,KAAK,SAAA4Q,GAAC,OAAKN,EAAOf,OAAS,IAAIsB,MAAM3Q,QAAQ4Q,MAAMC,KAAK7Q,iBAtNrC8M,yBCjBjCgE,IAASC,OACPvI,EAAA7D,EAAA8D,cAACuI,EAAD,MACArE,SAASsE,eAAe","file":"static/js/main.601efbc4.chunk.js","sourcesContent":["if (\"serviceWorker\" in navigator) {\n  navigator.serviceWorker\n    .register(\"./service-worker.js\", { scope: \"/react-tic-tac-toe/\" })\n    .then(function(registration) {\n      console.log(\"Service Worker Registered\");\n    });\n  navigator.serviceWorker.ready.then(function(registration) {\n    console.log(\"Service Worker Ready\");\n  });\n}\n","export const eq = (obj1, obj2) => obj1 === obj2;\nexport const identity = el => el;\nexport const notIdentity = el => !identity(el);\n\n/**\n *\n * @param {String} base This Class ALWAYS will be applied to the element/component\n * @param {String|Array<String>} extra All the other classes we want to apply to the element if the predicate is true\n * @param {Boolean} predicate This condition determinates if the extra classes are aplied or not\n * @returns {String} All the classes the element need based on the @param predicate\n */\nexport const dynamicClass = (base, extra, predicate) =>\n  predicate ? `${base} ${Array.isArray(extra) ? extra.join(' ') : extra}` : base;\n\n/**\n * This function increments by one the passed value\n * @param {Number} x Any valid Integer\n * @returns {Number} x + 1\n */\nexport const inc = (x) => x + 1\n\n/**\n * This function is syntax sugar for Object.assign but for objects only\n * You must be careful with the order you pass the options, the lasts objects\n * will overwrite the firsts\n * @param {Object} base The main object upon which will build the new one\n * @param {...Object} options Individual objects wich  will mutate the base\n * @returns{Object} this is the combination of the base mutated by the options\n */\nexport const extend = (base, ...options) => Object.assign({}, base, ...options)\n","// @flow\nexport default class LocalStorage {\n  static secretPrefix;\n\n  constructor(prefix = 'XO') {\n    this.secretprefix = prefix;\n  }\n\n  /**\n   * This function set any value to the local storage. It will generate a key\n   * with {LocalStorage.GenerateKey} and {LocalStorage.Stringify} the value.\n   * @param {String} key This is the entry key. It will be merged with your secretPrefix\n   * @param {Any} value Any value will be {LocalStorage.Strigify}\\\n   * @returns {Any}\n   */\n  set(key, value) {\n    const item = this.GenerateKey(key);\n\n    localStorage.setItem(item, this.Stringify(value));\n    return this.get(key);\n  }\n\n  /**\n   * This method return the item stored with under the passed key. If the key already contains the\n   * secretPrefix it look for it, if not it genereates the key.\n   * @param {String} key The Object Key wich saved the object. It can contain the secretPrefix or not\n   * @returns {Any|null}\n   */\n  get(key) {\n    const item = key.includes(this.secretprefix) ? key : this.GenerateKey(key);\n\n    return this.Parse(localStorage.getItem(item));\n  }\n\n  /**\n   * This function will remove permanently from local storage our object\n   * @param {String} key The Object key wich store the value\n   * @returns {undefined}\n   */\n  remove(key) {\n    const item = this.GenerateKey(key);\n    return localStorage.removeItem(item);\n  }\n\n  /**\n   * This function will delete ALL entries in localStorage wich contains our secret prefix\n   */\n  clear() {\n    for (let key in localStorage) {\n      if (key.includes(this.secretprefix)) localStorage.removeItem(key);\n    }\n  }\n\n  // Private Functions\n\n  /**\n   * This method generates a uniq key by merging the passed key it with the secretPrefix\n   * @param {String} key The basic key without our secretPrefix\n   * @returns {String}\n   */\n  GenerateKey(key) {\n    return `${this.secretprefix}-${key}`;\n  }\n\n  Parse(value) {\n    try {\n      return JSON.parse(value);\n    } catch (exception) {\n      return '';\n    }\n  }\n\n  /**\n   * This method takes any paramether and according to its type returns the value itself or a JSON.stringify Version of the value\n   * @param {Any} value This is the value we will stringify\n   * @return {String}\n   */\n  Stringify(value) {\n    if (typeof value === 'string' || typeof value === 'number') {\n      return value.toString();\n    } else if (typeof value === 'object') {\n      try {\n        return JSON.stringify(value);\n      } catch (exception) {\n        return '';\n      }\n    } else {\n      return '';\n    }\n  }\n}\n","export default class HistoryEntry {\n\n  /**\n   * This is a simple object for defining the form of all the History Entries\n   * @param {String} winner The label to recognize the player\n   * @param {Number} time The time the game took expressed in Secs\n   * @param {Number} score Is the final calculus of the time and variables\n   */\n  constructor(winner, time, score) {\n    this.winner = winner;\n    this.time = time;\n    this.score = score;\n  }\n}\n","import LocalStorage from './local-storage';\n\nimport HistoryEntry from './history-entry'\n\nimport { RateBoard } from './tictactoe';\n\nexport default class GameHistory {\n  constructor() {\n    this.Store = new LocalStorage('XO-HISTORY');\n    this.SCORES = [500, 20, 10, 5];\n    this.MaxRegistries = 10;\n  }\n\n  /**\n * This function return an history entry calculating the score based on time, board\n * and some multiplier. If the time === 0 you get the max score\n * @param {String} token The symbol of the winner player\n * @param {Array<String>} board The current board in the moment the game is over\n * @param {Number} time The ammount of time the winner player took to win\n */\n  GenerateHistory(token, board, time) {\n    const multipler = time / 5 <= 3 ? Math.round(time / 5) : 3;\n    const base = this.SCORES[multipler];\n    const BoardScore = RateBoard(board);\n    let score = BoardScore * base;\n    return this.updateHistory(new HistoryEntry(token, time, score))\n  }\n\n  /**\n   * This function will return an array containing all the histories available at the time\n   * @returns {Array<HistoryEntry>}\n   */\n  getHistory() {\n    const storageHistory = this.Store.get('history') || [];;\n    return this.getTopScores(storageHistory);\n  }\n\n\n  resetScores() {\n    this.Store.clear();\n  }\n\n  /**\n   * This function wraps the LocalStorage and handle the procces of updating without\n   * overwrite the currentHistory that already exists\n   * @param {HistoryEntry} newEntry the new register for the History\n   * @returns {Array<HistoryEntry>} all the history inside the Store\n   */\n  updateHistory(newEntry) {\n    const currentHistory = this.getHistory();\n    const mergedHistory = [...currentHistory, newEntry];\n    const topHistory = this.getTopScores(mergedHistory)\n    return this.Store.set('history', topHistory);\n  }\n\n  /**\n   * This function takes a history and pass it to sortHistory and only returns\n   * the top players defined by this.MaxRegistries\n   * @param {Array<HistoryEntry>} history The history to be sorted and filtered\n   */\n  getTopScores(history) {\n    return this.sortHistory(history).slice(0, this.MaxRegistries);\n  }\n\n  /**\n   * This function takes as parameter a history and returns the same history\n   * sorted by score leading the best scores at the top\n   * @param {Array<HistoryEntry>} history The whole history in any order\n   */\n  sortHistory(history) {\n    return history.sort((a, b) => a.score < b.score);\n  }\n}\n","import { eq } from './helpers';\n\nimport GameHistory from './history'\n\nexport const PLAYER_ONE_SYMBOL = 'X';\nexport const PLAYER_TWO_SYMBOL = 'O';\n\nexport function Board() {\n  return ['', '', '', '', '', '', '', '', ''];\n}\n\nexport const CurrentSquareAvailable = square => square === '';\n\n/**\n * This function recieve a Board Array and returns a new Board Array with the move applied\n * @param {Array<String>} board The Board an Array with a length of 9\n * @param {Number} index The position in the board where the move will be placed\n * @param {String} player The symbol will be placed in this position\n * @returns {Array<String>} The new Board with the move include\n */\nexport const MakeMove = (board, index, player) => {\n  return CurrentSquareAvailable(board[index])\n    ? board.map((square, idx) => eq(idx, index) ? player : square)\n    : board;\n}\n\n/**\n * This function will switch between returning the oposite player for the one passed\n * @param {String} player\n * @returns {String} the oposite player to the one passed\n */\nexport const SwitchPlayers = player => {\n  return eq(player, PLAYER_ONE_SYMBOL) ? PLAYER_TWO_SYMBOL : PLAYER_ONE_SYMBOL;\n}\n\n/**\n * This function checks if any `winningCombo` is present in the board passed as parameter\n * @param {Array} board\n * @returns {Array<Number>|false}\n */\nexport const CheckForWinner = board => {\n  const winningCombos = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  return winningCombos.find(combo => {\n    if (\n      eq(board[combo[0]], board[combo[1]]) &&\n      eq(board[combo[1]], board[combo[2]])\n    ) {\n      return board[combo[0]];\n    } else {\n      return false;\n    }\n  });\n};\n\n/**\n * This functions return an array filled with the index of LegalMoves in the passed board\n * @param {Array<String>} board The board in wich we'll search the available moves\n */\nexport const LegalMoves = board => board.reduce((prev, curr, i) => !curr ? [...prev, i] : prev, []);\n\n/**\n * This function recieve a String Array and returns the ammount of moves remaining on this board\n * @param {Array<String>} board This is the board where we are going to check for available moves\n * @returns {number}\n */\nexport const RemainingMoves = board => LegalMoves(board).length;\n\n/**\n * This function takes a Board and Evaluates it if is a winned board and calculates\n * the available moves and the remainings. Based on these  variables it assigns a value to the current\n * board given the highest score to a wining board and a 0 to a lose one. The total score depends if\n * the table is won, raw or lose and on each case (except if it's lose) it calculates based on the\n * remainingMoves\n * @param {Array<string>} board This is the board wich we want to obtain the value\n */\nexport const RateBoard = (board) => {\n  const winner = CheckForWinner(board);\n  const availableMoves = RemainingMoves(board);\n  let result;\n  if (winner) {\n    result = 10 + availableMoves;\n  } else if (availableMoves){\n    result = -10 + availableMoves\n  } else {\n    result = 0\n  }\n  return result;\n}\n\nconst GameOver = (board) => CheckForWinner(board) || !RemainingMoves(board);\n\nfunction MinScenario(board, player, depth) {\n  if(GameOver(board) || !depth) {\n    return RateBoard(board);\n  }\n  let bestScenario = Number.NEGATIVE_INFINITY;\n  const availableMoves = LegalMoves(board);\n  const nextPlayer = SwitchPlayers(player)\n  const NextScenario = nextPlayer === PLAYER_TWO_SYMBOL ? MaxScenario : MinScenario\n  for (let move of availableMoves) {\n    const scenario = NextScenario(MakeMove(board, move, nextPlayer), nextPlayer, depth -1)\n    bestScenario = scenario > bestScenario ? move : bestScenario;\n  }\n\n\n  return bestScenario\n}\n\nfunction MaxScenario(board, player, depth) {\n  if(GameOver(board) || !depth) {\n    return RateBoard(board);\n  }\n  let bestScenario = Number.NEGATIVE_INFINITY;\n  const availableMoves = LegalMoves(board);\n  const nextPlayer = SwitchPlayers(player)\n  const NextScenario = nextPlayer === PLAYER_TWO_SYMBOL ? MaxScenario : MinScenario\n  for (let move of availableMoves) {\n    const scenario = NextScenario(MakeMove(board, move, nextPlayer), nextPlayer, depth -1)\n    bestScenario = scenario > bestScenario ? move : bestScenario;\n  }\n\n\n  return bestScenario\n}\n\nexport const PlayAI = (board, depth, player) => {\n  if(CheckForWinner(board)) return RateBoard(board);\n//  const availableMoves = LegalMoves(board);\n  const bestMove =  MinScenario(board, player, 2);\n  return bestMove\n}\n\n/**\n * This function creates a brand new State with the core parts of the Tic tac toe game\n * And let you pass over any extra members you need in your state\n * @param {Object} extras all extra options you need on your game\n */\nexport const GameState = (extras) => Object.assign({}, {\n  PLAYER_ONE_SYMBOL,\n  PLAYER_TWO_SYMBOL,\n  currentTurn: PLAYER_ONE_SYMBOL,\n  board: new Board(),\n  winner: undefined,\n  history: new GameHistory(),\n  vsComputer: true,\n  gameStarted: false,\n  times: {\n    [PLAYER_ONE_SYMBOL]: 0,\n    [PLAYER_TWO_SYMBOL]: 0,\n  }\n}, extras)\n","import React from \"react\";\nimport PropTypes from 'prop-types'\n\nimport \"./GameBoard.css\";\n\nimport { dynamicClass } from '../../functionality/helpers'\n\nconst GameBoard = ({ board, winner, onSelectSquare }) => {\n  const BoardSquares = board.map((square, index) => (\n    <button type=\"button\"\n      aria-label={`Cuadro ${index + 1}. Valor: ${square || 'Ninguno'}`}\n      key={index}\n      onClick={() => onSelectSquare(index)}\n      className={generateSquareClass(winner, index)}\n    >\n      <div className=\"container\">\n        <div className=\"wrapper\">\n          <div className=\"content\">\n            {square}\n          </div>\n        </div>\n      </div>\n    </button>\n  ));\n  return (\n    <div className=\"GameBoard\">\n      {BoardSquares}\n    </div>\n  );\n};\n\nGameBoard.propTypes = {\n  winner: PropTypes.array,\n  board: PropTypes.array.isRequired,\n  onSelectSquare: PropTypes.func.isRequired\n};\n\nconst positionClasses = [\n  'GameBoard__square--top GameBoard__square--left', 'GameBoard__square--top GameBoard__square--middle', 'GameBoard__square--top GameBoard__square--right',\n  'GameBoard__square--center GameBoard__square--left', 'GameBoard__square--center GameBoard__square--middle', 'GameBoard__square--center GameBoard__square--right',\n  'GameBoard__square--bottom GameBoard__square--left', 'GameBoard__square--bottom GameBoard__square--middle', 'GameBoard__square--bottom GameBoard__square--right',\n]\n\nfunction generateSquareClass(winner, index) {\n  return dynamicClass(\n    `GameBoard__square ${positionClasses[index]}`,\n    ['GameBoard__square--winner'],\n    winner && winner.findIndex(el => el === index) >= 0\n  )\n}\nexport default GameBoard;\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nimport './GameStadistics.css';\n\nexport const GameStadistics = ({states, onResetScores}) => (\n  <div className=\"GameStadistics\">\n    <table>\n    <thead>\n      <tr>\n        <th>Partida</th>\n        <th>Ganador</th>\n        <th>Tiempo <small>(segs)</small></th>\n        <th>Puntaje</th>\n        <th>\n          <button className=\"btn btn--circle btn--warn\" title=\"Borrar Puntajes\" onClick={() => onResetScores()}>\n            <i className=\"material-icons\">delete_sweep</i>\n          </button>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      {generateTable(states)}\n    </tbody>\n  </table>\n  </div>\n);\n\nexport default GameStadistics;\n\nGameStadistics.propTypes = {\n  states: PropTypes.array.isRequired,\n  onResetScores: PropTypes.func.isRequired\n}\nGameStadistics.defaultProps = {\n  states: []\n}\n\n/**\n *\n * @param {Array<{winner: String, time: Number, score: Number}>} states\n */\nfunction generateTable(states) {\n  return states.map((state, index) => (\n    <tr key={index} className=\"t-row--centered\">\n      <td>{index + 1}</td>\n      <td>{state.winner}</td>\n      <td>{state.time}</td>\n      <td colSpan=\"2\">{state.score}</td>\n    </tr>\n  ))\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types'\n\nimport GameBoard from \"./GameBoard\";\nimport GameStadistics from \"../ui/GameStadistics\";\nimport \"./Game.css\";\n\nexport const Game = ({winner, board, onSelectSquare, history, onResetScores}) => (\n  <div className=\"Game\">\n    <GameBoard\n      board={board}\n      winner={winner}\n      onSelectSquare={(square) => onSelectSquare(square)}\n    />\n    <GameStadistics onResetScores={() => onResetScores()} states={history} />\n  </div>\n);\n\nGame.propTypes = {\n  winner: PropTypes.array,\n  board: PropTypes.array.isRequired,\n  history: PropTypes.array.isRequired,\n  onSelectSquare: PropTypes.func.isRequired,\n}\n\nexport default Game;\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nimport './ColorPicker.css';\n\nlet ColorOptions = [\n  {\n    title: 'Usar Fondo Oscuro',\n    className: ['circle-color', 'circle-color--dark'],\n    eventClass: 'dark'\n  }, {\n    title: 'Usar Fondo Rojo',\n    className: ['circle-color', 'circle-color--red'],\n    eventClass: 'red'\n  }, {\n    title: 'Usar Fondo Azul',\n    className: ['circle-color', 'circle-color--blue'],\n    eventClass: 'blue'\n  }, {\n    title: 'Usar Fondo Verde',\n    className: ['circle-color', 'circle-color--green'],\n    eventClass: 'green'\n  }, {\n    title: 'Usar Fondo Predeterminado',\n    className: ['circle-color'],\n    eventClass: ''\n  }\n];\n\nexport const ColorPicker = ({ onChangeColor }) => {\n  const ColorSelected = (id, color) => {\n    ColorOptions = ColorOptions.map((color, index) => {\n      if(index === id) {\n        return Object.assign({}, color, {className: [...color.className, 'circle-color--active']});\n      }\n      return Object.assign({}, color, {className: color.className.join(' ').split('circle-color--active')})\n    })\n    onChangeColor(color);\n  }\n  const buttonsColor = ColorOptions.map(({title, className, eventClass}, index) => (\n    <button key={index} type=\"button\" title={title} className={className.join(' ')} onClick={(event) => ColorSelected(index, eventClass)}></button>\n  ))\n  return (\n    <div className=\"ColorPicker\">\n      { buttonsColor }\n    </div>\n  );\n};\n\nexport default ColorPicker;\n\nColorPicker.propTypes = {\n  onChangeColor: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nimport './GameConfigBar.css';\n\nimport { dynamicClass } from '../../functionality/helpers';\n\nimport ColorPicker from '../functional/ColorPicker';\n\nconst GameConfigBar = (\n  {\n    times,\n    currentPlayer,\n    onResetGame,\n    winner,\n    isVisible,\n    onChangeColor,\n    onSetVolume\n  }\n) => (\n  <header\n    className={dynamicClass(\n      'GameConfigBar',\n      ['GameConfigBar--visible'],\n      isVisible\n    )}\n  >\n    <div className=\"config-block color-picker\">\n      <h4 className=\"config-block__header\">Configuración de Sonido</h4>\n      <div className=\"config-block__content\">\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"1\"\n          step=\"0.1\"\n          onChange={({ target }) => onSetVolume(target.value)}\n        />\n      </div>\n    </div>\n    <div className=\"config-block timer\">\n      <h4 className=\"config-block__header\">Turno de {currentPlayer}</h4>\n      <div className=\"config-block__content\">{times[currentPlayer] + ' segs'}</div>\n    </div>\n    <div className=\"config-block color-picker\">\n      <h4 className=\"config-block__header\">Color de Fondo</h4>\n      <div className=\"config-block__content\">\n        <ColorPicker onChangeColor={color => onChangeColor(color)} />\n      </div>\n    </div>\n    <div className=\"config-block reset-game\">\n      <button className=\"btn btn--big btn--warn\" onClick={() => onResetGame()}>\n        {winner ? 'Nueva Partida' : 'Reiniciar Partida'}\n      </button>\n    </div>\n  </header>\n);\nGameConfigBar.propTypes = {\n  currentPlayer: PropTypes.string.isRequired,\n  onResetGame: PropTypes.func.isRequired,\n  onChangeColor: PropTypes.func.isRequired,\n  onSetVolume: PropTypes.func.isRequired,\n  winner: PropTypes.bool.isRequired,\n  times: PropTypes.object,\n  isVisible: PropTypes.bool.isRequired\n};\n\nGameConfigBar.defaultProps = {\n  times: {}\n}\n\nexport default GameConfigBar;\n","import React from \"react\";\nimport PropTypes from 'prop-types'\n\nimport \"./GameModeSelect.css\";\n\nimport { dynamicClass } from '../../functionality/helpers'\n\nexport const GameModeSelect = ({ onModeSelect, isVisible }) => (\n  <div className={dynamicClass('GameModeSelect', ['GameModeSelect--visible'], isVisible)}>\n    <div className=\"GameModeSelect__container\">\n      <h1>Elegir al jugador 1</h1>\n      <span className=\"flex--spandex\" />\n      <div className=\"GameModeSelect__selector\">\n        <button\n          className=\"btn btn--big btn--success GameModeSelect__panel\"\n          onClick={() => onModeSelect(true)}\n        >\n          1 vs PC\n        </button>\n        <button\n          className=\"btn btn--big btn--success GameModeSelect__panel\"\n          onClick={() => onModeSelect(false)}\n        >\n          1 vs 1\n        </button>\n      </div>\n    </div>\n  </div>\n);\n\nGameModeSelect.propTypes = {\n  onModeSelect: PropTypes.func.isRequired,\n  isVisible: PropTypes.bool.isRequired\n};\n\nexport default GameModeSelect;\n","import React, { forwardRef } from 'react'\nimport PropTypes from 'prop-types'\n\nconst AUDIOFX_DIR = 'assets/audio/fx/'\nexport const FxPlayer = forwardRef(({ mediaSrc, mediaType }, ref) => (\n  <audio\n    ref={ref}\n    preload=\"metadata\"\n    src={AUDIOFX_DIR + mediaSrc}\n    type={`audio/${mediaType || 'mp3'}`}\n  />\n))\n\nFxPlayer.propTypes = {\n  mediaSrc: PropTypes.string.isRequired,\n  mediaType: PropTypes.string,\n}\n\nexport default FxPlayer\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nimport './AboutTable.css'\n\nexport const AboutTable = ({ members }) => (\n  <table className=\"AboutTable\">\n    <thead>\n      <tr>\n        <th />\n        <th>Nombre</th>\n        <th>Matrícula</th>\n      </tr>\n    </thead>\n    <tbody>\n      {generateMembersCells(members)}\n    </tbody>\n  </table>\n);\n\nexport default AboutTable;\n\nAboutTable.propTypes = {\n  members: PropTypes.array\n}\n\nAboutTable.defaultProps = {\n  members: []\n}\n\nfunction generateMembersCells(members) {\n  return members.map(member => (\n    <tr key={member.registration}>\n      <td>\n        <img className=\"img--circular img--responsive profile-pic\" src={member.image} alt={member.name} />\n      </td>\n      <td>{member.name}</td>\n      <td>{member.registration}</td>\n    </tr>\n  ));\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport './AboutModal.css'\n\nimport AboutTable from '../ui/AboutTable'\nimport { dynamicClass } from '../../functionality/helpers'\n\nimport { members } from '../../data/info.json'\n\nexport default class AboutModal extends Component {\n  render() {\n    return (\n      <div\n        className={dynamicClass(\n          'AboutModal',\n          ['AboutModal--is-visible'],\n          this.props.isVisible\n        )}\n      >\n        <h1 className=\"AboutModal__title\">Acerca de</h1>\n        <button\n          className=\"btn btn--transparent btn--circle AboutModal__btn-close\"\n          type=\"button\"\n          onClick={() => this.props.onClose()}\n        >\n          X\n        </button>\n        <div className=\"AboutModal__content\">\n          <div className=\"AboutModal__content__block\">\n            <h2 className=\"AboutModal__content_title\">¿Cómo jugar?</h2>\n            <div className=\"AboutModal__instructions\">{gameInstructions()}</div>\n          </div>\n          <div className=\"AboutModal__content__block\">\n            <h2 className=\"AboutModal__content_title\">Desarrolladores</h2>\n            <div className=\"AboutModal__instructions\">\n              <AboutTable members={members} />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n  componentDidMount() {\n    document.addEventListener('keyup', ({ keyCode }) => {\n      if (keyCode === 27 && this.props.isVisible) this.props.onClose()\n    })\n  }\n}\n\nAboutModal.propTypes = {\n  isVisible: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n}\n\nAboutModal.defaultProps = {\n  isVisible: false,\n}\n\nfunction gameInstructions() {\n  return (\n    <p>\n      Es un juego entre dos jugadores: <em>X</em> y <em>O</em>, que marcan los\n      espacios de un tablero de 3×3 alternadamente. Un jugador gana si consigue\n      tener una línea de tres de sus símbolos:{' '}\n      <strong> la línea puede ser horizontal, vertical o diagonal. </strong>{' '}\n      Elige el simbolo de jugador 1, y empieza una partida. ¡Suerte!\n    </p>\n  )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './FAB.css'\n\nexport const FAB = ({onClick, text, title}) => (\n  <button title={title} className=\"FAB btn btn--circle btn--accent\" type=\"button\" onClick={() => onClick()}>\n    {text}\n  </button>\n)\n\nexport default FAB;\n\nFAB.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired\n}\n","import React, { Component, createRef } from 'react'\n\nimport './App.css'\n\nimport {\n  GameState,\n  CheckForWinner,\n  MakeMove,\n  PlayAI,\n  RemainingMoves,\n  SwitchPlayers,\n} from './functionality/tictactoe'\n\nimport { extend, eq, dynamicClass, inc } from './functionality/helpers'\n\nimport Game from './components/Game/Game'\nimport GameConfigBar from './components/Game/GameConfigBar'\nimport GameModeSelect from './components/Game/GameModeSelect'\nimport FxPlayer from './components/ui/FxPlayer'\n\nimport AboutModal from './components/functional/AboutModal'\nimport FAB from './components/ui/FAB'\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.InitialState = new GameState({\n      headerVisible: false,\n      aboutVisible: false,\n      BGColor: '',\n      FX: {\n        currentFX: 'pop1.mp3',\n      },\n    })\n\n    this.state = this.InitialState\n    this.FXPlayer = createRef()\n    this.FXPlayer1 = createRef()\n    this.FXPlayer2 = createRef()\n  }\n\n  render() {\n    return (\n      <div\n        className={dynamicClass(\n          `App ${this.state.BGColor}`,\n          ['modal--is-open'],\n          this.state.aboutVisible\n        )}\n      >\n        <button\n          onClick={() => this.toggleHeader()}\n          type=\"button\"\n          className={dynamicClass(\n            'hamburger-menu',\n            ['hamburger-menu--open'],\n            this.state.headerVisible\n          )}\n        >\n          <span className=\"hamburger-menu__line\" />\n          <span className=\"hamburger-menu__line\" />\n          <span className=\"hamburger-menu__line\" />\n        </button>\n        <GameConfigBar\n          isVisible={this.state.headerVisible}\n          times={this.state.times}\n          winner={Boolean(this.state.winner)}\n          currentPlayer={this.state.currentTurn}\n          onSetVolume={amount => this.onSetVolume(amount)}\n          onResetGame={() => this.InitGame()}\n          onChangeColor={color => this.onChangeColor(color)}\n        />\n        <Game\n          winner={this.state.winner}\n          board={this.state.board}\n          history={this.state.history.getHistory()}\n          onResetScores={() => this.state.history.resetScores()}\n          onSelectSquare={square =>\n            this.MakeMove(this.state, square, this.state.currentTurn)\n          }\n        />\n        <FAB\n          text=\"?\"\n          title=\"Ayuda\"\n          onClick={() => this.setState({ aboutVisible: true })}\n        />\n        <FxPlayer ref={this.FXPlayer} mediaSrc={this.state.FX.currentFX} />\n        <FxPlayer ref={this.FXPlayer1} mediaSrc={'pop1.mp3'} />\n        <FxPlayer ref={this.FXPlayer2} mediaSrc={'pop2.mp3'} />\n        <GameModeSelect\n          isVisible={!this.state.gameStarted}\n          onModeSelect={mode => this.InitGame(mode)}\n        />\n        <AboutModal\n          isVisible={this.state.aboutVisible}\n          onClose={() => this.setState({ aboutVisible: false })}\n        />\n      </div>\n    )\n  }\n\n  componentWillUpdate(props, state, anys) {\n    if (\n      eq(state.currentTurn, this.state.PLAYER_TWO_SYMBOL) &&\n      eq(state.vsComputer, true)\n    ) {\n      this.MakeAIMove(state)\n    }\n  }\n\n  componentWillUnmount() {\n    this.StopGameTimer()\n  }\n\n  InitGame(mode) {\n    const gameStarted = mode === undefined ? false : true\n    this.StopGameTimer()\n    this.setState(\n      extend(this.InitialState, {\n        gameStarted,\n        vsComputer: mode,\n        BGColor: this.state.BGColor,\n        history: this.state.history,\n      })\n    )\n    if (gameStarted) this.SetGameTimer()\n  }\n\n  SetGameTimer() {\n    this.timer = setInterval(() => {\n      const player = this.state.currentTurn\n      const newTimes = extend(this.state.times, {\n        [player]: inc(this.state.times[player]),\n      })\n      this.setState({ times: newTimes })\n    }, 1000)\n  }\n\n  StopGameTimer() {\n    clearInterval(this.timer)\n  }\n\n  onSetVolume(amount) {\n    this.FXPlayer.volume = amount\n  }\n\n  onChangeColor(color) {\n    this.setState({\n      BGColor: color ? `App--bg-${color}` : '',\n    })\n  }\n\n  toggleHeader() {\n    this.setState({\n      headerVisible: !this.state.headerVisible,\n    })\n  }\n\n  MakeMove(state, square, player) {\n    if (!state.winner)\n      this.setState(this.UpdateGameStatus(state, square, player))\n  }\n\n  UpdateGameStatus(state, squareIndex, player) {\n    let newState = {}\n\n    newState.board = MakeMove(state.board, squareIndex, player)\n\n    if (eq(newState.board, state.board)) {\n      return {}\n    } else {\n      const isWinner = CheckForWinner(newState.board)\n      const computerWon =\n        isWinner &&\n        (state.vsComputer && state.currentTurn === state.PLAYER_TWO_SYMBOL)\n      if (isWinner) {\n        newState.winner = isWinner\n        const winnerName = computerWon\n        ? 'ComputerXO'\n        : prompt('Ingrese su nombre', 'Player 1') || 'Player 1'\n        this.state.history.GenerateHistory(\n          `${winnerName} (${state.currentTurn})`,\n          newState.board,\n          state.times[state.currentTurn]\n          )\n          this.StopGameTimer()\n          this.PlayFx('applause.mp3')\n          newState.gameStarted = false\n      } else if (RemainingMoves(newState.board)) {\n        this.PlayPopEffect(player)\n        newState.currentTurn = SwitchPlayers(player)\n      } else {\n        this.StopGameTimer()\n        this.PlayFx('jeer.mp3')\n      }\n    }\n\n    return newState\n  }\n\n  MakeAIMove(game) {\n    const nextMove = PlayAI(game.board, 2, game.currentTurn)\n    this.MakeMove(game, nextMove, game.currentTurn)\n  }\n\n  PlayPopEffect(player) {\n    if (player === this.state.PLAYER_ONE_SYMBOL)\n      this.PlayFxPlayer(this.FXPlayer1)\n    if (\n      player === this.state.PLAYER_TWO_SYMBOL &&\n      !eq(this.state.vsComputer, true)\n    )\n      this.PlayFxPlayer(this.FXPlayer2)\n  }\n\n  PlayFx(currentFX) {\n    const { current: Player } = this.FXPlayer\n\n    this.setState({ FX: { currentFX } }, () => {\n      this.PlaySound(Player)\n    })\n  }\n\n  PlayFxPlayer(FxPlayer) {\n    const { current: Player } = FxPlayer\n    this.PlaySound(Player)\n  }\n\n  /**\n   *\n   * @param {HTMLAudioElement} Player Any Player, with a source\n   */\n  PlaySound(Player) {\n    Player.currentTime = 0\n    Player.volume = 0.5\n    const promise = Player.play()\n    if (promise !== undefined) {\n      promise.then(_ => (Player.volume = 1)).catch(console.error.bind(console))\n    }\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport './install-sw';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}