{"version":3,"sources":["install-sw.js","functionality/helpers.js","functionality/local-storage.js","functionality/history-entry.js","functionality/history.js","functionality/tictactoe.js","components/Game/GameBoard.js","components/ui/GameStadistics.js","components/Game/Game.js","components/functional/ColorPicker.js","components/Game/GameConfigBar.js","components/Game/GameModeSelect.js","components/ui/FxPlayer.js","components/ui/AboutTable.js","components/functional/AboutModal.js","components/ui/FAB.js","App.js","index.js"],"names":["navigator","serviceWorker","register","scope","then","registration","console","log","ready","eq","obj1","obj2","dynamicClass","base","extra","predicate","Array","isArray","join","extend","options","Object","assign","LocalStorage","prefix","this","secretprefix","key","value","item","GenerateKey","localStorage","setItem","Stringify","get","includes","Parse","getItem","removeItem","JSON","parse","exception","toString","stringify","HistoryEntry","winner","time","score","GameHistory","Store","SCORES","MaxRegistries","token","board","multipler","Math","round","RateBoard","updateHistory","storageHistory","getTopScores","clear","newEntry","currentHistory","getHistory","mergedHistory","topHistory","set","history","sortHistory","slice","sort","a","b","PLAYER_TWO_SYMBOL","Board","MakeMove","index","player","map","square","idx","SwitchPlayers","CheckForWinner","find","combo","LegalMoves","reduce","prev","curr","i","RemainingMoves","length","availableMoves","GameOver","MinScenario","depth","bestScenario","Number","NEGATIVE_INFINITY","nextPlayer","NextScenario","MaxScenario","move","GameState","extras","PLAYER_ONE_SYMBOL","currentTurn","undefined","vsComputer","gameStarted","times","positionClasses","generateSquareClass","findIndex","el","GameBoard","onSelectSquare","BoardSquares","type","aria-label","onClick","className","GameStadistics","states","onResetScores","title","state","colSpan","generateTable","defaultProps","Game","ColorOptions","eventClass","ColorPicker","onChangeColor","buttonsColor","event","id","color","split","GameConfigBar","currentPlayer","onResetGame","isVisible","onSetVolume","min","max","step","onChange","target","GameModeSelect","onModeSelect","FxPlayer","forwardRef","ref","mediaSrc","mediaType","preload","src","propTypes","PropTypes","string","isRequired","AboutTable","members","member","image","alt","name","generateMembersCells","AboutModal","props","onClose","document","addEventListener","keyCode","Component","FAB","text","App","InitialState","headerVisible","aboutVisible","BGColor","FX","currentFX","FXPlayer","createRef","FXPlayer1","FXPlayer2","toggleHeader","Boolean","amount","InitGame","resetScores","setState","mode","anys","MakeAIMove","StopGameTimer","SetGameTimer","timer","setInterval","newTimes","clearInterval","volume","UpdateGameStatus","squareIndex","newState","isWinner","computerWon","winnerName","prompt","GenerateHistory","PlayFx","PlayPopEffect","game","nextMove","PlayFxPlayer","Player","current","PlaySound","currentTime","promise","play","_","catch","error","bind","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7671cfe6.chunk.js","sourcesContent":["if (\"serviceWorker\" in navigator) {\n  navigator.serviceWorker\n    .register(\"./service-worker.js\", { scope: \"/react-tic-tac-toe/\" })\n    .then(function(registration) {\n      console.log(\"Service Worker Registered\");\n    });\n  navigator.serviceWorker.ready.then(function(registration) {\n    console.log(\"Service Worker Ready\");\n  });\n}\n","export const eq = (obj1, obj2) => obj1 === obj2;\nexport const identity = el => el;\nexport const notIdentity = el => !identity(el);\n\n/**\n *\n * @param {String} base This Class ALWAYS will be applied to the element/component\n * @param {String|Array<String>} extra All the other classes we want to apply to the element if the predicate is true\n * @param {Boolean} predicate This condition determinates if the extra classes are aplied or not\n * @returns {String} All the classes the element need based on the @param predicate\n */\nexport const dynamicClass = (base, extra, predicate) =>\n  predicate ? `${base} ${Array.isArray(extra) ? extra.join(' ') : extra}` : base;\n\n/**\n * This function increments by one the passed value\n * @param {Number} x Any valid Integer\n * @returns {Number} x + 1\n */\nexport const inc = (x) => x + 1\n\n/**\n * This function is syntax sugar for Object.assign but for objects only\n * You must be careful with the order you pass the options, the lasts objects\n * will overwrite the firsts\n * @param {Object} base The main object upon which will build the new one\n * @param {...Object} options Individual objects wich  will mutate the base\n * @returns{Object} this is the combination of the base mutated by the options\n */\nexport const extend = (base, ...options) => Object.assign({}, base, ...options)\n","// @flow\nexport default class LocalStorage {\n  static secretPrefix;\n\n  constructor(prefix = 'XO') {\n    this.secretprefix = prefix;\n  }\n\n  /**\n   * This function set any value to the local storage. It will generate a key\n   * with {LocalStorage.GenerateKey} and {LocalStorage.Stringify} the value.\n   * @param {String} key This is the entry key. It will be merged with your secretPrefix\n   * @param {Any} value Any value will be {LocalStorage.Strigify}\\\n   * @returns {Any}\n   */\n  set(key, value) {\n    const item = this.GenerateKey(key);\n\n    localStorage.setItem(item, this.Stringify(value));\n    return this.get(key);\n  }\n\n  /**\n   * This method return the item stored with under the passed key. If the key already contains the\n   * secretPrefix it look for it, if not it genereates the key.\n   * @param {String} key The Object Key wich saved the object. It can contain the secretPrefix or not\n   * @returns {Any|null}\n   */\n  get(key) {\n    const item = key.includes(this.secretprefix) ? key : this.GenerateKey(key);\n\n    return this.Parse(localStorage.getItem(item));\n  }\n\n  /**\n   * This function will remove permanently from local storage our object\n   * @param {String} key The Object key wich store the value\n   * @returns {undefined}\n   */\n  remove(key) {\n    const item = this.GenerateKey(key);\n    return localStorage.removeItem(item);\n  }\n\n  /**\n   * This function will delete ALL entries in localStorage wich contains our secret prefix\n   */\n  clear() {\n    for (let key in localStorage) {\n      if (key.includes(this.secretprefix)) localStorage.removeItem(key);\n    }\n  }\n\n  // Private Functions\n\n  /**\n   * This method generates a uniq key by merging the passed key it with the secretPrefix\n   * @param {String} key The basic key without our secretPrefix\n   * @returns {String}\n   */\n  GenerateKey(key) {\n    return `${this.secretprefix}-${key}`;\n  }\n\n  Parse(value) {\n    try {\n      return JSON.parse(value);\n    } catch (exception) {\n      return '';\n    }\n  }\n\n  /**\n   * This method takes any paramether and according to its type returns the value itself or a JSON.stringify Version of the value\n   * @param {Any} value This is the value we will stringify\n   * @return {String}\n   */\n  Stringify(value) {\n    if (typeof value === 'string' || typeof value === 'number') {\n      return value.toString();\n    } else if (typeof value === 'object') {\n      try {\n        return JSON.stringify(value);\n      } catch (exception) {\n        return '';\n      }\n    } else {\n      return '';\n    }\n  }\n}\n","export default class HistoryEntry {\n\n  /**\n   * This is a simple object for defining the form of all the History Entries\n   * @param {String} winner The label to recognize the player\n   * @param {Number} time The time the game took expressed in Secs\n   * @param {Number} score Is the final calculus of the time and variables\n   */\n  constructor(winner, time, score) {\n    this.winner = winner;\n    this.time = time;\n    this.score = score;\n  }\n}\n","import LocalStorage from './local-storage';\n\nimport HistoryEntry from './history-entry'\n\nimport { RateBoard } from './tictactoe';\n\nexport default class GameHistory {\n  constructor() {\n    this.Store = new LocalStorage('XO-HISTORY');\n    this.SCORES = [500, 20, 10, 5];\n    this.MaxRegistries = 10;\n  }\n\n  /**\n * This function return an history entry calculating the score based on time, board\n * and some multiplier. If the time === 0 you get the max score\n * @param {String} token The symbol of the winner player\n * @param {Array<String>} board The current board in the moment the game is over\n * @param {Number} time The ammount of time the winner player took to win\n */\n  GenerateHistory(token, board, time) {\n    const multipler = time / 5 <= 3 ? Math.round(time / 5) : 3;\n    const base = this.SCORES[multipler];\n    const BoardScore = RateBoard(board);\n    let score = BoardScore * base;\n    return this.updateHistory(new HistoryEntry(token, time, score))\n  }\n\n  /**\n   * This function will return an array containing all the histories available at the time\n   * @returns {Array<HistoryEntry>}\n   */\n  getHistory() {\n    const storageHistory = this.Store.get('history') || [];;\n    return this.getTopScores(storageHistory);\n  }\n\n\n  resetScores() {\n    this.Store.clear();\n  }\n\n  /**\n   * This function wraps the LocalStorage and handle the procces of updating without\n   * overwrite the currentHistory that already exists\n   * @param {HistoryEntry} newEntry the new register for the History\n   * @returns {Array<HistoryEntry>} all the history inside the Store\n   */\n  updateHistory(newEntry) {\n    const currentHistory = this.getHistory();\n    const mergedHistory = [...currentHistory, newEntry];\n    const topHistory = this.getTopScores(mergedHistory)\n    return this.Store.set('history', topHistory);\n  }\n\n  /**\n   * This function takes a history and pass it to sortHistory and only returns\n   * the top players defined by this.MaxRegistries\n   * @param {Array<HistoryEntry>} history The history to be sorted and filtered\n   */\n  getTopScores(history) {\n    return this.sortHistory(history).slice(0, this.MaxRegistries);\n  }\n\n  /**\n   * This function takes as parameter a history and returns the same history\n   * sorted by score leading the best scores at the top\n   * @param {Array<HistoryEntry>} history The whole history in any order\n   */\n  sortHistory(history) {\n    return history.sort((a, b) => a.score < b.score);\n  }\n}\n","import { eq } from './helpers';\n\nimport GameHistory from './history'\n\nexport const PLAYER_ONE_SYMBOL = 'X';\nexport const PLAYER_TWO_SYMBOL = 'O';\n\nexport function Board() {\n  return ['', '', '', '', '', '', '', '', ''];\n}\n\nexport const CurrentSquareAvailable = square => square === '';\n\n/**\n * This function recieve a Board Array and returns a new Board Array with the move applied\n * @param {Array<String>} board The Board an Array with a length of 9\n * @param {Number} index The position in the board where the move will be placed\n * @param {String} player The symbol will be placed in this position\n * @returns {Array<String>} The new Board with the move include\n */\nexport const MakeMove = (board, index, player) => {\n  return CurrentSquareAvailable(board[index])\n    ? board.map((square, idx) => eq(idx, index) ? player : square)\n    : board;\n}\n\n/**\n * This function will switch between returning the oposite player for the one passed\n * @param {String} player\n * @returns {String} the oposite player to the one passed\n */\nexport const SwitchPlayers = player => {\n  return eq(player, PLAYER_ONE_SYMBOL) ? PLAYER_TWO_SYMBOL : PLAYER_ONE_SYMBOL;\n}\n\n/**\n * This function checks if any `winningCombo` is present in the board passed as parameter\n * @param {Array} board\n * @returns {Array<Number>|false}\n */\nexport const CheckForWinner = board => {\n  const winningCombos = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  return winningCombos.find(combo => {\n    if (\n      eq(board[combo[0]], board[combo[1]]) &&\n      eq(board[combo[1]], board[combo[2]])\n    ) {\n      return board[combo[0]];\n    } else {\n      return false;\n    }\n  });\n};\n\n/**\n * This functions return an array filled with the index of LegalMoves in the passed board\n * @param {Array<String>} board The board in wich we'll search the available moves\n */\nexport const LegalMoves = board => board.reduce((prev, curr, i) => !curr ? [...prev, i] : prev, []);\n\n/**\n * This function recieve a String Array and returns the ammount of moves remaining on this board\n * @param {Array<String>} board This is the board where we are going to check for available moves\n * @returns {number}\n */\nexport const RemainingMoves = board => LegalMoves(board).length;\n\n/**\n * This function takes a Board and Evaluates it if is a winned board and calculates\n * the available moves and the remainings. Based on these  variables it assigns a value to the current\n * board given the highest score to a wining board and a 0 to a lose one. The total score depends if\n * the table is won, raw or lose and on each case (except if it's lose) it calculates based on the\n * remainingMoves\n * @param {Array<string>} board This is the board wich we want to obtain the value\n */\nexport const RateBoard = (board) => {\n  const winner = CheckForWinner(board);\n  const availableMoves = RemainingMoves(board);\n  let result;\n  if (winner) {\n    result = 10 + availableMoves;\n  } else if (availableMoves){\n    result = -10 + availableMoves\n  } else {\n    result = 0\n  }\n  return result;\n}\n\nconst GameOver = (board) => CheckForWinner(board) || !RemainingMoves(board);\n\nfunction MinScenario(board, player, depth) {\n  if(GameOver(board) || !depth) {\n    return RateBoard(board);\n  }\n  let bestScenario = Number.NEGATIVE_INFINITY;\n  const availableMoves = LegalMoves(board);\n  const nextPlayer = SwitchPlayers(player)\n  const NextScenario = nextPlayer === PLAYER_TWO_SYMBOL ? MaxScenario : MinScenario\n  for (let move of availableMoves) {\n    const scenario = NextScenario(MakeMove(board, move, nextPlayer), nextPlayer, depth -1)\n    bestScenario = scenario > bestScenario ? move : bestScenario;\n  }\n\n\n  return bestScenario\n}\n\nfunction MaxScenario(board, player, depth) {\n  if(GameOver(board) || !depth) {\n    return RateBoard(board);\n  }\n  let bestScenario = Number.NEGATIVE_INFINITY;\n  const availableMoves = LegalMoves(board);\n  const nextPlayer = SwitchPlayers(player)\n  const NextScenario = nextPlayer === PLAYER_TWO_SYMBOL ? MaxScenario : MinScenario\n  for (let move of availableMoves) {\n    const scenario = NextScenario(MakeMove(board, move, nextPlayer), nextPlayer, depth -1)\n    bestScenario = scenario > bestScenario ? move : bestScenario;\n  }\n\n\n  return bestScenario\n}\n\nexport const PlayAI = (board, depth, player) => {\n  if(CheckForWinner(board)) return RateBoard(board);\n//  const availableMoves = LegalMoves(board);\n  const bestMove =  MinScenario(board, player, 2);\n  return bestMove\n}\n\n/**\n * This function creates a brand new State with the core parts of the Tic tac toe game\n * And let you pass over any extra members you need in your state\n * @param {Object} extras all extra options you need on your game\n */\nexport const GameState = (extras) => Object.assign({}, {\n  PLAYER_ONE_SYMBOL,\n  PLAYER_TWO_SYMBOL,\n  currentTurn: PLAYER_ONE_SYMBOL,\n  board: new Board(),\n  winner: undefined,\n  history: new GameHistory(),\n  vsComputer: true,\n  gameStarted: false,\n  times: {\n    [PLAYER_ONE_SYMBOL]: 0,\n    [PLAYER_TWO_SYMBOL]: 0,\n  }\n}, extras)\n","import React from \"react\";\nimport PropTypes from 'prop-types'\n\nimport \"./GameBoard.css\";\n\nimport { dynamicClass } from '../../functionality/helpers'\n\nconst GameBoard = ({ board, winner, onSelectSquare }) => {\n  const BoardSquares = board.map((square, index) => (\n    <button type=\"button\"\n      aria-label={`Cuadro ${index + 1}. Valor: ${square || 'Ninguno'}`}\n      key={index}\n      onClick={() => onSelectSquare(index)}\n      className={generateSquareClass(winner, index)}\n    >\n      <div className=\"container\">\n        <div className=\"wrapper\">\n          <div className=\"content\">\n            {square}\n          </div>\n        </div>\n      </div>\n    </button>\n  ));\n  return (\n    <div className=\"GameBoard\">\n      {BoardSquares}\n    </div>\n  );\n};\n\nGameBoard.propTypes = {\n  winner: PropTypes.array,\n  board: PropTypes.array.isRequired,\n  onSelectSquare: PropTypes.func.isRequired\n};\n\nconst positionClasses = [\n  'GameBoard__square--top GameBoard__square--left', 'GameBoard__square--top GameBoard__square--middle', 'GameBoard__square--top GameBoard__square--right',\n  'GameBoard__square--center GameBoard__square--left', 'GameBoard__square--center GameBoard__square--middle', 'GameBoard__square--center GameBoard__square--right',\n  'GameBoard__square--bottom GameBoard__square--left', 'GameBoard__square--bottom GameBoard__square--middle', 'GameBoard__square--bottom GameBoard__square--right',\n]\n\nfunction generateSquareClass(winner, index) {\n  return dynamicClass(\n    `GameBoard__square ${positionClasses[index]}`,\n    ['GameBoard__square--winner'],\n    winner && winner.findIndex(el => el === index) >= 0\n  )\n}\nexport default GameBoard;\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nimport './GameStadistics.css';\n\nexport const GameStadistics = ({states, onResetScores}) => (\n  <div className=\"GameStadistics\">\n    <table>\n    <thead>\n      <tr>\n        <th>Partida</th>\n        <th>Ganador</th>\n        <th>Tiempo <small>(segs)</small></th>\n        <th>Puntaje</th>\n        <th>\n          <button className=\"btn btn--circle btn--warn\" title=\"Borrar Puntajes\" onClick={() => onResetScores()}>\n            <i className=\"material-icons\">delete_sweep</i>\n          </button>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      {generateTable(states)}\n    </tbody>\n  </table>\n  </div>\n);\n\nexport default GameStadistics;\n\nGameStadistics.propTypes = {\n  states: PropTypes.array.isRequired,\n  onResetScores: PropTypes.func.isRequired\n}\nGameStadistics.defaultProps = {\n  states: []\n}\n\n/**\n *\n * @param {Array<{winner: String, time: Number, score: Number}>} states\n */\nfunction generateTable(states) {\n  return states.map((state, index) => (\n    <tr key={index} className=\"t-row--centered\">\n      <td>{index + 1}</td>\n      <td>{state.winner}</td>\n      <td>{state.time}</td>\n      <td colSpan=\"2\">{state.score}</td>\n    </tr>\n  ))\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types'\n\nimport GameBoard from \"./GameBoard\";\nimport GameStadistics from \"../ui/GameStadistics\";\nimport \"./Game.css\";\n\nexport const Game = ({winner, board, onSelectSquare, history, onResetScores}) => (\n  <div className=\"Game\">\n    <GameBoard\n      board={board}\n      winner={winner}\n      onSelectSquare={(square) => onSelectSquare(square)}\n    />\n    <GameStadistics onResetScores={() => onResetScores()} states={history} />\n  </div>\n);\n\nGame.propTypes = {\n  winner: PropTypes.array,\n  board: PropTypes.array.isRequired,\n  history: PropTypes.array.isRequired,\n  onSelectSquare: PropTypes.func.isRequired,\n}\n\nexport default Game;\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nimport './ColorPicker.css';\n\nlet ColorOptions = [\n  {\n    title: 'Usar Fondo Oscuro',\n    className: ['circle-color', 'circle-color--dark'],\n    eventClass: 'dark'\n  }, {\n    title: 'Usar Fondo Rojo',\n    className: ['circle-color', 'circle-color--red'],\n    eventClass: 'red'\n  }, {\n    title: 'Usar Fondo Azul',\n    className: ['circle-color', 'circle-color--blue'],\n    eventClass: 'blue'\n  }, {\n    title: 'Usar Fondo Verde',\n    className: ['circle-color', 'circle-color--green'],\n    eventClass: 'green'\n  }, {\n    title: 'Usar Fondo Predeterminado',\n    className: ['circle-color'],\n    eventClass: ''\n  }\n];\n\nexport const ColorPicker = ({ onChangeColor }) => {\n  const ColorSelected = (id, color) => {\n    ColorOptions = ColorOptions.map((color, index) => {\n      if(index === id) {\n        return Object.assign({}, color, {className: [...color.className, 'circle-color--active']});\n      }\n      return Object.assign({}, color, {className: color.className.join(' ').split('circle-color--active')})\n    })\n    onChangeColor(color);\n  }\n  const buttonsColor = ColorOptions.map(({title, className, eventClass}, index) => (\n    <button key={index} type=\"button\" title={title} className={className.join(' ')} onClick={(event) => ColorSelected(index, eventClass)}></button>\n  ))\n  return (\n    <div className=\"ColorPicker\">\n      { buttonsColor }\n    </div>\n  );\n};\n\nexport default ColorPicker;\n\nColorPicker.propTypes = {\n  onChangeColor: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nimport './GameConfigBar.css';\n\nimport { dynamicClass } from '../../functionality/helpers';\n\nimport ColorPicker from '../functional/ColorPicker';\n\nconst GameConfigBar = (\n  {\n    times,\n    currentPlayer,\n    onResetGame,\n    winner,\n    isVisible,\n    onChangeColor,\n    onSetVolume\n  }\n) => (\n  <header\n    className={dynamicClass(\n      'GameConfigBar',\n      ['GameConfigBar--visible'],\n      isVisible\n    )}\n  >\n    <div className=\"config-block color-picker\">\n      <h4 className=\"config-block__header\">Configuración de Sonido</h4>\n      <div className=\"config-block__content\">\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"1\"\n          step=\"0.1\"\n          onChange={({ target }) => onSetVolume(target.value)}\n        />\n      </div>\n    </div>\n    <div className=\"config-block timer\">\n      <h4 className=\"config-block__header\">Turno de {currentPlayer}</h4>\n      <div className=\"config-block__content\">{times[currentPlayer] + ' segs'}</div>\n    </div>\n    <div className=\"config-block color-picker\">\n      <h4 className=\"config-block__header\">Color de Fondo</h4>\n      <div className=\"config-block__content\">\n        <ColorPicker onChangeColor={color => onChangeColor(color)} />\n      </div>\n    </div>\n    <div className=\"config-block reset-game\">\n      <button className=\"btn btn--big btn--warn\" onClick={() => onResetGame()}>\n        {winner ? 'Nueva Partida' : 'Reiniciar Partida'}\n      </button>\n    </div>\n  </header>\n);\nGameConfigBar.propTypes = {\n  currentPlayer: PropTypes.string.isRequired,\n  onResetGame: PropTypes.func.isRequired,\n  onChangeColor: PropTypes.func.isRequired,\n  onSetVolume: PropTypes.func.isRequired,\n  winner: PropTypes.bool.isRequired,\n  times: PropTypes.object,\n  isVisible: PropTypes.bool.isRequired\n};\n\nGameConfigBar.defaultProps = {\n  times: {}\n}\n\nexport default GameConfigBar;\n","import React from \"react\";\nimport PropTypes from 'prop-types'\n\nimport \"./GameModeSelect.css\";\n\nimport { dynamicClass } from '../../functionality/helpers'\n\nexport const GameModeSelect = ({ onModeSelect, isVisible }) => (\n  <div className={dynamicClass('GameModeSelect', ['GameModeSelect--visible'], isVisible)}>\n    <div className=\"GameModeSelect__container\">\n      <h1>Elegir al jugador 1</h1>\n      <span className=\"flex--spandex\" />\n      <div className=\"GameModeSelect__selector\">\n        <button\n          className=\"btn btn--big btn--success GameModeSelect__panel\"\n          onClick={() => onModeSelect(true)}\n        >\n          1 vs PC\n        </button>\n        <button\n          className=\"btn btn--big btn--success GameModeSelect__panel\"\n          onClick={() => onModeSelect(false)}\n        >\n          1 vs 1\n        </button>\n      </div>\n    </div>\n  </div>\n);\n\nGameModeSelect.propTypes = {\n  onModeSelect: PropTypes.func.isRequired,\n  isVisible: PropTypes.bool.isRequired\n};\n\nexport default GameModeSelect;\n","import React, { forwardRef } from 'react'\nimport PropTypes from 'prop-types'\n\nconst AUDIOFX_DIR = 'assets/audio/fx/'\nexport const FxPlayer = forwardRef(({ mediaSrc, mediaType }, ref) => (\n  <audio\n    ref={ref}\n    preload=\"metadata\"\n    src={AUDIOFX_DIR + mediaSrc}\n    type={`audio/${mediaType || 'mp3'}`}\n  />\n))\n\nFxPlayer.propTypes = {\n  mediaSrc: PropTypes.string.isRequired,\n  mediaType: PropTypes.string,\n}\n\nexport default FxPlayer\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nimport './AboutTable.css'\n\nexport const AboutTable = ({ members }) => (\n  <table className=\"AboutTable\">\n    <thead>\n      <tr>\n        <th />\n        <th>Nombre</th>\n        <th>Matrícula</th>\n      </tr>\n    </thead>\n    <tbody>\n      {generateMembersCells(members)}\n    </tbody>\n  </table>\n);\n\nexport default AboutTable;\n\nAboutTable.propTypes = {\n  members: PropTypes.array\n}\n\nAboutTable.defaultProps = {\n  members: []\n}\n\nfunction generateMembersCells(members) {\n  return members.map(member => (\n    <tr key={member.registration}>\n      <td>\n        <img className=\"img--circular img--responsive profile-pic\" src={member.image} alt={member.name} />\n      </td>\n      <td>{member.name}</td>\n      <td>{member.registration}</td>\n    </tr>\n  ));\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport './AboutModal.css'\n\nimport AboutTable from '../ui/AboutTable'\nimport { dynamicClass } from '../../functionality/helpers'\n\nimport { members } from '../../data/info.json'\n\nexport default class AboutModal extends Component {\n  render() {\n    return (\n      <div\n        className={dynamicClass(\n          'AboutModal',\n          ['AboutModal--is-visible'],\n          this.props.isVisible\n        )}\n      >\n        <h1 className=\"AboutModal__title\">Acerca de</h1>\n        <button\n          className=\"btn btn--transparent btn--circle AboutModal__btn-close\"\n          type=\"button\"\n          onClick={() => this.props.onClose()}\n        >\n          X\n        </button>\n        <div className=\"AboutModal__content\">\n          <div className=\"AboutModal__content__block\">\n            <h2 className=\"AboutModal__content_title\">¿Cómo jugar?</h2>\n            <div className=\"AboutModal__instructions\">{gameInstructions()}</div>\n          </div>\n          <div className=\"AboutModal__content__block\">\n            <h2 className=\"AboutModal__content_title\">Desarrolladores</h2>\n            <div className=\"AboutModal__instructions\">\n              <AboutTable members={members} />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n  componentDidMount() {\n    document.addEventListener('keyup', ({ keyCode }) => {\n      if (keyCode === 27 && this.props.isVisible) this.props.onClose()\n    })\n  }\n}\n\nAboutModal.propTypes = {\n  isVisible: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n}\n\nAboutModal.defaultProps = {\n  isVisible: false,\n}\n\nfunction gameInstructions() {\n  return (\n    <p>\n      Es un juego entre dos jugadores: <em>X</em> y <em>O</em>, que marcan los\n      espacios de un tablero de 3×3 alternadamente. Un jugador gana si consigue\n      tener una línea de tres de sus símbolos:{' '}\n      <strong> la línea puede ser horizontal, vertical o diagonal. </strong>{' '}\n      Elige el simbolo de jugador 1, y empieza una partida. ¡Suerte!\n    </p>\n  )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './FAB.css'\n\nexport const FAB = ({onClick, text, title}) => (\n  <button title={title} className=\"FAB btn btn--circle btn--accent\" type=\"button\" onClick={() => onClick()}>\n    {text}\n  </button>\n)\n\nexport default FAB;\n\nFAB.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired\n}\n","import React, { Component, createRef } from 'react'\n\nimport './App.css'\n\nimport {\n  GameState,\n  CheckForWinner,\n  MakeMove,\n  PlayAI,\n  RemainingMoves,\n  SwitchPlayers,\n} from './functionality/tictactoe'\n\nimport { extend, eq, dynamicClass, inc } from './functionality/helpers'\n\nimport Game from './components/Game/Game'\nimport GameConfigBar from './components/Game/GameConfigBar'\nimport GameModeSelect from './components/Game/GameModeSelect'\nimport FxPlayer from './components/ui/FxPlayer'\n\nimport AboutModal from './components/functional/AboutModal'\nimport FAB from './components/ui/FAB'\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.InitialState = new GameState({\n      headerVisible: false,\n      aboutVisible: false,\n      BGColor: '',\n      FX: {\n        currentFX: 'pop1.mp3',\n      },\n    })\n\n    this.state = this.InitialState\n    this.FXPlayer = createRef()\n    this.FXPlayer1 = createRef()\n    this.FXPlayer2 = createRef()\n  }\n\n  render() {\n    return (\n      <div\n        className={dynamicClass(\n          `App ${this.state.BGColor}`,\n          ['modal--is-open'],\n          this.state.aboutVisible\n        )}\n      >\n        <button\n          onClick={() => this.toggleHeader()}\n          type=\"button\"\n          className={dynamicClass(\n            'hamburger-menu',\n            ['hamburger-menu--open'],\n            this.state.headerVisible\n          )}\n        >\n          <span className=\"hamburger-menu__line\" />\n          <span className=\"hamburger-menu__line\" />\n          <span className=\"hamburger-menu__line\" />\n        </button>\n        <GameConfigBar\n          isVisible={this.state.headerVisible}\n          times={this.state.times}\n          winner={Boolean(this.state.winner)}\n          currentPlayer={this.state.currentTurn}\n          onSetVolume={amount => this.onSetVolume(amount)}\n          onResetGame={() => this.InitGame()}\n          onChangeColor={color => this.onChangeColor(color)}\n        />\n        <Game\n          winner={this.state.winner}\n          board={this.state.board}\n          history={this.state.history.getHistory()}\n          onResetScores={() => this.state.history.resetScores()}\n          onSelectSquare={square =>\n            this.MakeMove(this.state, square, this.state.currentTurn)\n          }\n        />\n        <FAB\n          text=\"?\"\n          title=\"Ayuda\"\n          onClick={() => this.setState({ aboutVisible: true })}\n        />\n        <FxPlayer ref={this.FXPlayer} mediaSrc={this.state.FX.currentFX} />\n        <FxPlayer ref={this.FXPlayer1} mediaSrc={'pop1.mp3'} />\n        <FxPlayer ref={this.FXPlayer2} mediaSrc={'pop2.mp3'} />\n        <GameModeSelect\n          isVisible={!this.state.gameStarted}\n          onModeSelect={mode => this.InitGame(mode)}\n        />\n        <AboutModal\n          isVisible={this.state.aboutVisible}\n          onClose={() => this.setState({ aboutVisible: false })}\n        />\n      </div>\n    )\n  }\n\n  componentWillUpdate(props, state, anys) {\n    if (\n      eq(state.currentTurn, this.state.PLAYER_TWO_SYMBOL) &&\n      eq(state.vsComputer, true)\n    ) {\n      this.MakeAIMove(state)\n    }\n  }\n\n  componentWillUnmount() {\n    this.StopGameTimer()\n  }\n\n  InitGame(mode) {\n    const gameStarted = mode === undefined ? false : true\n    this.StopGameTimer()\n    this.setState(\n      extend(this.InitialState, {\n        gameStarted,\n        vsComputer: mode,\n        BGColor: this.state.BGColor,\n        history: this.state.history,\n      })\n    )\n    if (gameStarted) this.SetGameTimer()\n  }\n\n  SetGameTimer() {\n    this.timer = setInterval(() => {\n      const player = this.state.currentTurn\n      const newTimes = extend(this.state.times, {\n        [player]: inc(this.state.times[player]),\n      })\n      this.setState({ times: newTimes })\n    }, 1000)\n  }\n\n  StopGameTimer() {\n    clearInterval(this.timer)\n  }\n\n  onSetVolume(amount) {\n    this.FXPlayer.volume = amount\n  }\n\n  onChangeColor(color) {\n    this.setState({\n      BGColor: color ? `App--bg-${color}` : '',\n    })\n  }\n\n  toggleHeader() {\n    this.setState({\n      headerVisible: !this.state.headerVisible,\n    })\n  }\n\n  MakeMove(state, square, player) {\n    if (!state.winner)\n      this.setState(this.UpdateGameStatus(state, square, player))\n  }\n\n  UpdateGameStatus(state, squareIndex, player) {\n    let newState = {}\n\n    newState.board = MakeMove(state.board, squareIndex, player)\n\n    if (eq(newState.board, state.board)) {\n      return {}\n    } else {\n      const isWinner = CheckForWinner(newState.board)\n      const computerWon =\n        isWinner &&\n        (state.vsComputer && state.currentTurn === state.PLAYER_TWO_SYMBOL)\n      if (isWinner) {\n        newState.winner = isWinner\n        const winnerName = computerWon\n        ? 'ComputerXO'\n        : prompt('Ingrese su nombre', 'Player 1') || 'Player 1'\n        this.state.history.GenerateHistory(\n          `${winnerName} (${state.currentTurn})`,\n          newState.board,\n          state.times[state.currentTurn]\n          )\n          this.StopGameTimer()\n          this.PlayFx('applause.mp3')\n          newState.gameStarted = false\n      } else if (RemainingMoves(newState.board)) {\n        this.PlayPopEffect(player)\n        newState.currentTurn = SwitchPlayers(player)\n      } else {\n        this.StopGameTimer()\n        this.PlayFx('jeer.mp3')\n      }\n    }\n\n    return newState\n  }\n\n  MakeAIMove(game) {\n    const nextMove = PlayAI(game.board, 2, game.currentTurn)\n    this.MakeMove(game, nextMove, game.currentTurn)\n  }\n\n  PlayPopEffect(player) {\n    if (player === this.state.PLAYER_ONE_SYMBOL)\n      this.PlayFxPlayer(this.FXPlayer1)\n    if (\n      player === this.state.PLAYER_TWO_SYMBOL &&\n      !eq(this.state.vsComputer, true)\n    )\n      this.PlayFxPlayer(this.FXPlayer2)\n  }\n\n  PlayFx(currentFX) {\n    const { current: Player } = this.FXPlayer\n\n    this.setState({ FX: { currentFX } }, () => {\n      this.PlaySound(Player)\n    })\n  }\n\n  PlayFxPlayer(FxPlayer) {\n    const { current: Player } = FxPlayer\n    this.PlaySound(Player)\n  }\n\n  /**\n   *\n   * @param {HTMLAudioElement} Player Any Player, with a source\n   */\n  PlaySound(Player) {\n    Player.currentTime = 0\n    Player.volume = 0.5\n    const promise = Player.play()\n    if (promise !== undefined) {\n      promise.then(_ => (Player.volume = 1)).catch(console.error.bind(console))\n    }\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport './install-sw';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}