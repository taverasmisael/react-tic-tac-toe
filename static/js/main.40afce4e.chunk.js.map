{"version":3,"sources":["install-sw.js","functionality/local-storage.js","functionality/history-entry.js","functionality/history.js","functionality/tictactoe.js","components/Game/GameBoard.js","components/ui/GameStadistics.js","components/Game/Game.js","components/functional/ColorPicker.js","components/Game/GameConfigBar.js","components/Game/GameModeSelect.js","components/ui/AboutTable.js","components/functional/AboutModal.js","components/ui/FAB.js","App.js","index.js"],"names":["navigator","serviceWorker","register","scope","then","registration","console","log","ready","LocalStorage","prefix","set","key","value","item","GenerateKey","localStorage","setItem","Stringify","get","includes","secretprefix","Parse","getItem","remove","removeItem","clear","JSON","parse","exception","toString","stringify","this","HistoryEntry","winner","time","score","GameHistory","Store","SCORES","MaxRegistries","GenerateHistory","token","board","multipler","Math","round","base","RateBoard","updateHistory","getHistory","storageHistory","getTopScores","resetScores","newEntry","currentHistory","mergedHistory","topHistory","history","sortHistory","slice","sort","a","b","sortNumber","order","Number","MakeMove","index","player","map","square","idx","SwitchPlayers","CheckForWinner","find","combo","LegalMoves","reduce","prev","curr","i","RemainingMoves","length","availableMoves","GameOver","PlayAI","depth","MinScenario","bestScenario","NEGATIVE_INFINITY","nextPlayer","move","GameState","extras","PLAYER_ONE_SYMBOL","PLAYER_TWO_SYMBOL","currentTurn","Array","fill","undefined","vsComputer","gameStarted","times","GameBoard","memo","onSelectSquare","BoardSquares","type","aria-label","onClick","className","generateSquareClass","toLowerCase","positionClasses","classnames","findIndex","el","GameStadistics","states","onResetScores","title","state","colSpan","generateTable","defaultProps","Game","COLOR_OPTIONS","eventClass","ColorPicker","onChangeColor","currentColor","GameConfigBar","currentPlayer","onResetGame","useState","headerVisible","setHeaderVisible","color","GameModeSelect","onModeSelect","isVisible","AboutTable","members","member","src","image","alt","name","generateMembersCells","AboutModal","props","useEffect","handleKeyPress","keyCode","onClose","document","addEventListener","removeEventListener","FAB","children","App","InitialState","aboutVisible","InitGame","mode","StopGameTimer","setState","SetGameTimer","timer","setInterval","clearInterval","UpdateGameStatus","squareIndex","newBoard","compare","isComputerPlaying","playerTime","computerWon","noMoreMoves","nextTurn","winnerName","prompt","MakeAIMove","game","nextMove","backgroundClass","_","PureComponent","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.40afce4e.chunk.js","sourcesContent":["if ('serviceWorker' in navigator) {\n  navigator.serviceWorker\n    .register('./service-worker.js', { scope: '/react-tic-tac-toe/' })\n    .then(function(registration) {\n      console.log('Service Worker Registered')\n    })\n  navigator.serviceWorker.ready.then(function(registration) {\n    console.log('Service Worker Ready')\n  })\n}\n","export default class LocalStorage {\n  static secretPrefix\n\n  constructor(prefix = 'XO') {\n    this.secretprefix = prefix\n  }\n\n  /**\n   * This function set any value to the local storage. It will generate a key\n   * with {LocalStorage.GenerateKey} and {LocalStorage.Stringify} the value.\n   * @param {String} key This is the entry key. It will be merged with your secretPrefix\n   * @param {Any} value Any value will be {LocalStorage.Strigify}\\\n   * @returns {Any}\n   */\n  set = (key, value) => {\n    const item = this.GenerateKey(key)\n\n    localStorage.setItem(item, this.Stringify(value))\n    return this.get(key)\n  }\n\n  /**\n   * This method return the item stored with under the passed key. If the key already contains the\n   * secretPrefix it look for it, if not it genereates the key.\n   * @param {String} key The Object Key wich saved the object. It can contain the secretPrefix or not\n   * @returns {Any|null}\n   */\n  get = key => {\n    const item = key.includes(this.secretprefix) ? key : this.GenerateKey(key)\n\n    return this.Parse(localStorage.getItem(item))\n  }\n\n  /**\n   * This function will remove permanently from local storage our object\n   * @param {String} key The Object key wich store the value\n   * @returns {undefined}\n   */\n  remove = key => {\n    const item = this.GenerateKey(key)\n    return localStorage.removeItem(item)\n  }\n\n  /**\n   * This function will delete ALL entries in localStorage wich contains our secret prefix\n   */\n  clear = () => {\n    for (let key in localStorage) {\n      if (key.includes(this.secretprefix)) localStorage.removeItem(key)\n    }\n  }\n\n  // Private Functions\n\n  /**\n   * This method generates a uniq key by merging the passed key it with the secretPrefix\n   * @param {String} key The basic key without our secretPrefix\n   * @returns {String}\n   */\n  GenerateKey = key => `${this.secretprefix}-${key}`\n\n  Parse = value => {\n    try {\n      return JSON.parse(value)\n    } catch (exception) {\n      return ''\n    }\n  }\n\n  /**\n   * This method takes any paramether and according to its type returns the value itself or a JSON.stringify Version of the value\n   * @param {Any} value This is the value we will stringify\n   * @return {String}\n   */\n  Stringify = value => {\n    if (typeof value === 'string' || typeof value === 'number') {\n      return value.toString()\n    } else if (typeof value === 'object') {\n      try {\n        return JSON.stringify(value)\n      } catch (exception) {\n        return ''\n      }\n    } else {\n      return ''\n    }\n  }\n}\n","export default class HistoryEntry {\n  /**\n   * This is a simple object for defining the form of all the History Entries\n   * @param {String} winner The label to recognize the player\n   * @param {Number} time The time the game took expressed in Secs\n   * @param {Number} score Is the final calculus of the time and variables\n   */\n  constructor(winner, time, score) {\n    this.winner = winner\n    this.time = time\n    this.score = score\n  }\n}\n","import LocalStorage from './local-storage'\n\nimport HistoryEntry from './history-entry'\n\nimport { RateBoard } from './tictactoe'\n\nexport default class GameHistory {\n  Store = new LocalStorage('XO-HISTORY')\n  SCORES = [500, 20, 10, 5]\n  MaxRegistries = 10\n\n  /**\n   * This function return an history entry calculating the score based on time, board\n   * and some multiplier. If the time === 0 you get the max score\n   * @param {String} token The symbol of the winner player\n   * @param {Array<String>} board The current board in the moment the game is over\n   * @param {Number} time The ammount of time the winner player took to win\n   */\n  GenerateHistory = (token, board, time) => {\n    const multipler = time / 5 <= 3 ? Math.round(time / 5) : 3\n    const base = this.SCORES[multipler]\n    const BoardScore = RateBoard(board)\n    let score = BoardScore * base\n    return this.updateHistory(new HistoryEntry(token, time, score))\n  }\n\n  /**\n   * This function will return an array containing all the histories available at the time\n   * @returns {Array<HistoryEntry>}\n   */\n  getHistory = () => {\n    const storageHistory = this.Store.get('history') || []\n    return this.getTopScores(storageHistory)\n  }\n\n  resetScores = () => this.Store.clear()\n\n  /**\n   * This function wraps the LocalStorage and handle the procces of updating without\n   * overwrite the currentHistory that already exists\n   * @param {HistoryEntry} newEntry the new register for the History\n   * @returns {Array<HistoryEntry>} all the history inside the Store\n   */\n  updateHistory = newEntry => {\n    const currentHistory = this.getHistory()\n    const mergedHistory = [...currentHistory, newEntry]\n    const topHistory = this.getTopScores(mergedHistory)\n    return this.Store.set('history', topHistory)\n  }\n\n  /**\n   * This function takes a history and pass it to sortHistory and only returns\n   * the top players defined by this.MaxRegistries\n   * @param {Array<HistoryEntry>} history The history to be sorted and filtered\n   */\n  getTopScores = history =>\n    this.sortHistory(history).slice(0, this.MaxRegistries)\n\n  /**\n   * This function takes as parameter a history and returns the same history\n   * sorted by score leading the best scores at the top\n   * @param {Array<HistoryEntry>} history The whole history in any order\n   */\n  sortHistory = history =>\n    history.sort((a, b) =>\n      a.score === b.score\n        ? sortNumber(a.time, b.time, 1)\n        : sortNumber(a.score, b.score)\n    )\n}\n\nconst sortNumber = (a, b, order = -1) =>\n  Number(a || 0) >= Number(b || 0) ? order : order * -1\n","import GameHistory from './history'\n\nexport const PLAYER_ONE_SYMBOL = 'X'\nexport const PLAYER_TWO_SYMBOL = 'O'\n\nexport const createBoard = () => Array(9).fill('')\n\nexport const CurrentSquareAvailable = square => square === ''\n\n/**\n * This function recieve a Board Array and returns a new Board Array with the move applied\n * @param {Array<String>} board The Board an Array with a length of 9\n * @param {Number} index The position in the board where the move will be placed\n * @param {String} player The symbol will be placed in this position\n * @returns {Array<String>} The new Board with the move include\n */\nexport const MakeMove = (board, index, player) => {\n  return CurrentSquareAvailable(board[index])\n    ? board.map((square, idx) => (idx === index ? player : square))\n    : board\n}\n\n/**\n * This function will switch between returning the oposite player for the one passed\n * @param {String} player\n * @returns {String} the oposite player to the one passed\n */\nexport const SwitchPlayers = player => {\n  return player === PLAYER_ONE_SYMBOL ? PLAYER_TWO_SYMBOL : PLAYER_ONE_SYMBOL\n}\n\n/**\n * This function checks if any `winningCombo` is present in the board passed as parameter\n * @param {Array} board\n * @returns {Array<Number>|false}\n */\nexport const CheckForWinner = board => {\n  const winningCombos = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ]\n\n  return winningCombos.find(combo => {\n    if (\n      board[combo[0]] === board[combo[1]] &&\n      board[combo[1]] === board[combo[2]]\n    ) {\n      return board[combo[0]]\n    } else {\n      return false\n    }\n  })\n}\n\n/**\n * This functions return an array filled with the index of LegalMoves in the passed board\n * @param {Array<String>} board The board in wich we'll search the available moves\n */\nexport const LegalMoves = board =>\n  board.reduce((prev, curr, i) => (!curr ? [...prev, i] : prev), [])\n\n/**\n * This function recieve a String Array and returns the ammount of moves remaining on this board\n * @param {Array<String>} board This is the board where we are going to check for available moves\n * @returns {number}\n */\nexport const RemainingMoves = board => LegalMoves(board).length\n\n/**\n * This function takes a Board and Evaluates it if is a winned board and calculates\n * the available moves and the remainings. Based on these  variables it assigns a value to the current\n * board given the highest score to a wining board and a 0 to a lose one. The total score depends if\n * the table is won, raw or lose and on each case (except if it's lose) it calculates based on the\n * remainingMoves\n * @param {Array<string>} board This is the board wich we want to obtain the value\n */\nexport const RateBoard = board => {\n  const winner = CheckForWinner(board)\n  const availableMoves = RemainingMoves(board)\n  let result\n  if (winner) {\n    result = 10 + availableMoves\n  } else if (availableMoves) {\n    result = -10 + availableMoves\n  } else {\n    result = 0\n  }\n  return result\n}\n\nconst GameOver = board => CheckForWinner(board) || !RemainingMoves(board)\n\nfunction MinScenario(board, player, depth) {\n  if (GameOver(board) || !depth) {\n    return RateBoard(board)\n  }\n  let bestScenario = Number.NEGATIVE_INFINITY\n  const availableMoves = LegalMoves(board)\n  const nextPlayer = SwitchPlayers(player)\n\n  for (let move of availableMoves) {\n    const scenario = MinScenario(\n      MakeMove(board, move, nextPlayer),\n      nextPlayer,\n      depth - 1\n    )\n    bestScenario = scenario > bestScenario ? move : bestScenario\n  }\n\n  return bestScenario\n}\n\nexport const PlayAI = (board, depth, player) => {\n  if (CheckForWinner(board)) return RateBoard(board)\n  const bestMove = MinScenario(board, player, depth)\n  return bestMove\n}\n\n/**\n * This function creates a brand new State with the core parts of the Tic tac toe game\n * And let you pass over any extra members you need in your state\n * @param {Object} extras all extra options you need on your game\n */\nexport const GameState = extras => ({\n  PLAYER_ONE_SYMBOL,\n  PLAYER_TWO_SYMBOL,\n  currentTurn: PLAYER_ONE_SYMBOL,\n  board: createBoard(),\n  winner: undefined,\n  history: new GameHistory(),\n  vsComputer: true,\n  gameStarted: false,\n  times: {\n    [PLAYER_ONE_SYMBOL]: 0,\n    [PLAYER_TWO_SYMBOL]: 0,\n  },\n  ...extras,\n})\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\n\nimport './GameBoard.css'\n\nconst GameBoard = memo(({ board, winner, onSelectSquare }) => {\n  const BoardSquares = board.map((square, index) => (\n    <button\n      type=\"button\"\n      aria-label={`Cuadro ${index + 1}. Valor: ${square || 'Ninguno'}`}\n      key={index}\n      onClick={() => onSelectSquare(index)}\n      className={generateSquareClass(winner, index)}\n    >\n      <div className={`content content-color--${square.toLowerCase()}`}>\n        {square}\n      </div>\n    </button>\n  ))\n  return (\n    <div className=\"GameBoard\">\n      <div className=\"GameBoard__content\">{BoardSquares}</div>\n    </div>\n  )\n})\n\nGameBoard.propTypes = {\n  winner: PropTypes.array,\n  board: PropTypes.array.isRequired,\n  onSelectSquare: PropTypes.func.isRequired,\n}\n\nconst positionClasses = [\n  'GameBoard__square--top GameBoard__square--left',\n  'GameBoard__square--top GameBoard__square--middle',\n  'GameBoard__square--top GameBoard__square--right',\n  'GameBoard__square--center GameBoard__square--left',\n  'GameBoard__square--center GameBoard__square--middle',\n  'GameBoard__square--center GameBoard__square--right',\n  'GameBoard__square--bottom GameBoard__square--left',\n  'GameBoard__square--bottom GameBoard__square--middle',\n  'GameBoard__square--bottom GameBoard__square--right',\n]\n\nfunction generateSquareClass(winner, index) {\n  return classnames(`GameBoard__square ${positionClasses[index]}`, {\n    'GameBoard__square--winner':\n      winner && winner.findIndex(el => el === index) >= 0,\n  })\n}\nexport default GameBoard\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './GameStadistics.css'\n\nexport const GameStadistics = ({ states, onResetScores }) => (\n  <div className=\"GameStadistics\">\n    <table>\n      <thead>\n        <tr>\n          <th>Pos.</th>\n          <th>Ganador</th>\n          <th>\n            Tiempo <small>(segs)</small>\n          </th>\n          <th>Puntaje</th>\n          <th>\n            <button\n              className=\"btn btn--circle btn--warn\"\n              title=\"Borrar Puntajes\"\n              onClick={() => onResetScores()}\n            >\n              <i className=\"material-icons\">delete_sweep</i>\n            </button>\n          </th>\n        </tr>\n      </thead>\n      <tbody>{generateTable(states)}</tbody>\n    </table>\n  </div>\n)\n\nexport default GameStadistics\n\nGameStadistics.propTypes = {\n  states: PropTypes.array.isRequired,\n  onResetScores: PropTypes.func.isRequired,\n}\nGameStadistics.defaultProps = {\n  states: [],\n}\n\n/**\n *\n * @param {Array<{winner: String, time: Number, score: Number}>} states\n */\nfunction generateTable(states) {\n  return states.map((state, index) => (\n    <tr key={index} className=\"t-row--centered\">\n      <td>{index + 1}</td>\n      <td>{state.winner}</td>\n      <td>{state.time}</td>\n      <td colSpan=\"2\">{state.score}</td>\n    </tr>\n  ))\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport GameBoard from './GameBoard'\nimport GameStadistics from '../ui/GameStadistics'\nimport './Game.css'\n\nexport const Game = ({\n  winner,\n  board,\n  onSelectSquare,\n  history,\n  onResetScores,\n}) => (\n  <div className=\"Game\">\n    <GameBoard\n      board={board}\n      winner={winner}\n      onSelectSquare={square => onSelectSquare(square)}\n    />\n    <GameStadistics onResetScores={() => onResetScores()} states={history} />\n  </div>\n)\n\nGame.propTypes = {\n  winner: PropTypes.array,\n  board: PropTypes.array.isRequired,\n  history: PropTypes.array.isRequired,\n  onSelectSquare: PropTypes.func.isRequired,\n}\n\nexport default Game\n","import React from 'react'\nimport classnames from 'classnames'\nimport PropTypes from 'prop-types'\n\nimport './ColorPicker.css'\n\nconst COLOR_OPTIONS = [\n  {\n    title: 'Usar Fondo Oscuro',\n    className: 'circle-color circle-color--dark',\n    eventClass: 'dark',\n  },\n  {\n    title: 'Usar Fondo Rojo',\n    className: 'circle-color circle-color--red',\n    eventClass: 'red',\n  },\n  {\n    title: 'Usar Fondo Azul',\n    className: 'circle-color circle-color--blue',\n    eventClass: 'blue',\n  },\n  {\n    title: 'Usar Fondo Verde',\n    className: 'circle-color circle-color--green',\n    eventClass: 'green',\n  },\n  {\n    title: 'Usar Fondo Predeterminado',\n    className: 'circle-color',\n    eventClass: '',\n  },\n]\n\nconst ColorPicker = ({ onChangeColor, currentColor }) => (\n  <div className=\"ColorPicker\">\n    {COLOR_OPTIONS.map(({ title, className, eventClass }, index) => (\n      <button\n        key={index}\n        type=\"button\"\n        title={title}\n        className={classnames(className, {\n          'circle-color--active': currentColor === eventClass,\n        })}\n        onClick={() => onChangeColor(eventClass)}\n      ></button>\n    ))}\n  </div>\n)\n\nexport default ColorPicker\n\nColorPicker.propTypes = {\n  onChangeColor: PropTypes.func.isRequired,\n}\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\n\nimport './GameConfigBar.css'\n\nimport ColorPicker from '../functional/ColorPicker'\n\nconst GameConfigBar = ({\n  times,\n  currentPlayer,\n  onResetGame,\n  winner,\n  onChangeColor,\n  currentColor,\n}) => {\n  const [headerVisible, setHeaderVisible] = useState(false)\n  const toggleHeader = () => setHeaderVisible(state => !state)\n  return (\n    <>\n      <header\n        className={classnames('GameConfigBar', {\n          'GameConfigBar--visible': headerVisible,\n        })}\n      >\n        <div className=\"config-block timer\">\n          <h4 className=\"config-block__header\">Turno de {currentPlayer}</h4>\n          <div className=\"config-block__content\">\n            {times[currentPlayer] + ' segs'}\n          </div>\n        </div>\n        <div className=\"config-block color-picker\">\n          <h4 className=\"config-block__header\">Color de Fondo</h4>\n          <div className=\"config-block__content\">\n            <ColorPicker\n              currentColor={currentColor}\n              onChangeColor={color => onChangeColor(color)}\n            />\n          </div>\n        </div>\n        <div className=\"config-block reset-game\">\n          <button\n            className=\"btn btn--big btn--warn\"\n            onClick={() => onResetGame()}\n          >\n            {winner ? 'Nueva Partida' : 'Reiniciar Partida'}\n          </button>\n        </div>\n      </header>\n      <button\n        onClick={toggleHeader}\n        type=\"button\"\n        className={classnames('hamburger-menu', {\n          'hamburger-menu--open': headerVisible,\n        })}\n      >\n        <span className=\"hamburger-menu__line\" />\n        <span className=\"hamburger-menu__line\" />\n        <span className=\"hamburger-menu__line\" />\n      </button>\n    </>\n  )\n}\nGameConfigBar.propTypes = {\n  currentColor: PropTypes.string,\n  currentPlayer: PropTypes.string.isRequired,\n  onResetGame: PropTypes.func.isRequired,\n  onChangeColor: PropTypes.func.isRequired,\n  winner: PropTypes.bool.isRequired,\n  times: PropTypes.object,\n}\n\nGameConfigBar.defaultProps = {\n  times: {},\n}\n\nexport default GameConfigBar\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\n\nimport './GameModeSelect.css'\n\nexport const GameModeSelect = ({ onModeSelect, isVisible }) => (\n  <div\n    className={classnames('GameModeSelect', {\n      'GameModeSelect--visible': isVisible,\n    })}\n  >\n    <div className=\"GameModeSelect__container\">\n      <h1>Elegir al jugador 1</h1>\n      <span className=\"flex--spandex\" />\n      <div className=\"GameModeSelect__selector\">\n        <button\n          className=\"btn btn--big btn--success GameModeSelect__panel\"\n          onClick={() => onModeSelect(true)}\n        >\n          1 vs PC\n        </button>\n        <button\n          className=\"btn btn--big btn--success GameModeSelect__panel\"\n          onClick={() => onModeSelect(false)}\n        >\n          1 vs 1\n        </button>\n      </div>\n    </div>\n  </div>\n)\n\nGameModeSelect.propTypes = {\n  onModeSelect: PropTypes.func.isRequired,\n  isVisible: PropTypes.bool.isRequired,\n}\n\nexport default GameModeSelect\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './AboutTable.css'\n\nexport const AboutTable = ({ members }) => (\n  <table className=\"AboutTable\">\n    <thead>\n      <tr>\n        <th />\n        <th>Nombre</th>\n      </tr>\n    </thead>\n    <tbody>{generateMembersCells(members)}</tbody>\n  </table>\n)\n\nexport default AboutTable\n\nAboutTable.propTypes = {\n  members: PropTypes.array,\n}\n\nAboutTable.defaultProps = {\n  members: [],\n}\n\nfunction generateMembersCells(members) {\n  return members.map(member => (\n    <tr key={member.registration}>\n      <td>\n        <img\n          className=\"img--circular img--responsive profile-pic\"\n          src={member.image}\n          alt={member.name}\n        />\n      </td>\n      <td>{member.name}</td>\n    </tr>\n  ))\n}\n","import React, { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\n\nimport './AboutModal.css'\n\nimport AboutTable from '../ui/AboutTable'\n\nimport { members } from '../../data/info.json'\n\nconst AboutModal = props => {\n  useEffect(() => {\n    const handleKeyPress = ({ keyCode }) => {\n      if (keyCode === 27 && props.isVisible) props.onClose()\n    }\n    document.addEventListener('keyup', handleKeyPress)\n    return () => document.removeEventListener('keyup', handleKeyPress)\n  })\n\n  return (\n    <div\n      className={classnames('AboutModal', {\n        'AboutModal--is-visible': props.isVisible,\n      })}\n    >\n      <h1 className=\"AboutModal__title\">Acerca de</h1>\n      <button\n        className=\"btn btn--transparent btn--circle AboutModal__btn-close\"\n        type=\"button\"\n        onClick={() => props.onClose()}\n      >\n        X\n      </button>\n      <div className=\"AboutModal__content\">\n        <div className=\"AboutModal__content__block\">\n          <h2 className=\"AboutModal__content_title\">¿Cómo jugar?</h2>\n          <div className=\"AboutModal__instructions\">\n            <p>\n              Es un juego entre dos jugadores: <em>X</em> y <em>O</em>, que\n              marcan los espacios de un tablero de 3×3 alternadamente. Un\n              jugador gana si consigue tener una línea de tres de sus símbolos:{' '}\n              <strong>\n                la línea puede ser horizontal, vertical o diagonal.{' '}\n              </strong>\n              Elige el simbolo de jugador 1, y empieza una partida. ¡Suerte!\n            </p>\n          </div>\n        </div>\n        <div className=\"AboutModal__content__block\">\n          <h2 className=\"AboutModal__content_title\">Desarrolladores</h2>\n          <div className=\"AboutModal__instructions\">\n            <AboutTable members={members} />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nAboutModal.propTypes = {\n  isVisible: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default AboutModal\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './FAB.css'\n\nexport const FAB = ({ children, ...props }) => (\n  <button className=\"FAB btn btn--circle btn--accent\" type=\"button\" {...props}>\n    {children}\n  </button>\n)\n\nexport default FAB\n\nFAB.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n}\n","import React, { PureComponent } from 'react'\nimport classnames from 'classnames'\nimport compare from 'just-compare'\n\nimport './App.css'\n\nimport {\n  GameState,\n  CheckForWinner,\n  MakeMove,\n  PlayAI,\n  RemainingMoves,\n  SwitchPlayers,\n} from './functionality/tictactoe'\n\nimport Game from './components/Game/Game'\nimport GameConfigBar from './components/Game/GameConfigBar'\nimport GameModeSelect from './components/Game/GameModeSelect'\n\nimport AboutModal from './components/functional/AboutModal'\nimport FAB from './components/ui/FAB'\n\nexport default class App extends PureComponent {\n  InitialState = new GameState({\n    aboutVisible: false,\n    currentColor: '',\n  })\n  state = this.InitialState\n  state = this.InitialState\n\n  render() {\n    const {\n      currentColor,\n      times,\n      winner,\n      currentTurn,\n      aboutVisible,\n      board,\n      history,\n      gameStarted,\n    } = this.state\n\n    const backgroundClass = `App--bg-${currentColor}`\n\n    return (\n      <div\n        className={classnames('App', {\n          'modal--is-open': aboutVisible,\n          [backgroundClass]: currentColor,\n        })}\n      >\n        <GameConfigBar\n          times={times}\n          winner={!!winner}\n          currentPlayer={currentTurn}\n          onResetGame={this.InitGame}\n          onChangeColor={this.onChangeColor}\n          currentColor={currentColor}\n        />\n        <Game\n          winner={winner}\n          board={board}\n          history={history.getHistory()}\n          onResetScores={history.resetScores}\n          onSelectSquare={square =>\n            this.MakeMove(this.state, square, currentTurn)\n          }\n        />\n        <FAB\n          title=\"Ayuda\"\n          onClick={() => this.setState({ aboutVisible: true })}\n        >\n          ?\n        </FAB>\n        <GameModeSelect isVisible={!gameStarted} onModeSelect={this.InitGame} />\n        <AboutModal\n          isVisible={aboutVisible}\n          onClose={() => this.setState({ aboutVisible: false })}\n        />\n      </div>\n    )\n  }\n\n  componentDidUpdate(_, state) {\n    if (\n      state.vsComputer &&\n      state.currentTurn === this.state.PLAYER_TWO_SYMBOL\n    ) {\n      this.MakeAIMove(state)\n    }\n  }\n\n  componentWillUnmount() {\n    this.StopGameTimer()\n  }\n\n  InitGame = mode => {\n    const gameStarted = mode !== undefined\n    this.StopGameTimer()\n    this.setState(state => ({\n      ...this.InitialState,\n      gameStarted,\n      vsComputer: mode,\n      currentColor: state.currentColor,\n      history: state.history,\n    }))\n\n    if (gameStarted) this.SetGameTimer()\n  }\n\n  SetGameTimer = () => {\n    this.timer = setInterval(() => {\n      this.setState(state => {\n        const player = state.currentTurn\n        return {\n          times: {\n            ...state.times,\n            [player]: state.times[player] + 1,\n          },\n        }\n      })\n    }, 1000)\n  }\n\n  StopGameTimer = () => clearInterval(this.timer)\n\n  onChangeColor = color => this.setState({ currentColor: color })\n\n  MakeMove = (state, square, player) => {\n    if (!state.winner)\n      this.setState(this.UpdateGameStatus(state, square, player))\n  }\n\n  UpdateGameStatus = (state, squareIndex, player) => {\n    const newBoard = MakeMove(state.board, squareIndex, player)\n\n    if (compare(newBoard, state.board)) {\n      return {}\n    }\n\n    const isComputerPlaying =\n      state.vsComputer && state.currentTurn === state.PLAYER_TWO_SYMBOL\n    const playerTime = state.times[state.currentTurn]\n    const winner = CheckForWinner(newBoard)\n    const computerWon = winner && isComputerPlaying\n    const gameStarted = !winner\n    const noMoreMoves = !RemainingMoves(newBoard)\n    const nextTurn = noMoreMoves ? player : SwitchPlayers(player)\n\n    if (winner) {\n      const winnerName = computerWon\n        ? 'ComputerXO'\n        : prompt('Ingrese su nombre', 'Player 1') || 'Player 1'\n      this.state.history.GenerateHistory(\n        `${winnerName} (${state.currentTurn})`,\n        newBoard,\n        playerTime\n      )\n      this.StopGameTimer()\n    } else if (noMoreMoves) {\n      this.StopGameTimer()\n    }\n\n    return {\n      winner,\n      gameStarted,\n      currentTurn: nextTurn,\n      board: newBoard,\n    }\n  }\n\n  MakeAIMove = game => {\n    const nextMove = PlayAI(game.board, 10, game.currentTurn)\n    this.MakeMove(game, nextMove, game.currentTurn)\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport './install-sw'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}